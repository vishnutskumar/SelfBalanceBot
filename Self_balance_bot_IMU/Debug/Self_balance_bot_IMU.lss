
Self_balance_bot_IMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001566  000015fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  00800064  00800064  000015fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000174c  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  00002eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e4  00000000  00000000  0000355f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  00003d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  00004174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014b7  00000000  00000000  00004647  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00005afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      10:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      14:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      18:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      1c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      20:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      24:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      28:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      2c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      30:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      34:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_13>
      38:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_14>
      3c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      44:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      48:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      4c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      50:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 00       	.word	0x003f	; ????

00000082 <__trampolines_end>:
      82:	00 40       	sbci	r16, 0x00	; 0
      84:	7a 10       	cpse	r7, r10
      86:	f3 5a       	subi	r31, 0xA3	; 163
      88:	00 a0       	ldd	r0, Z+32	; 0x20
      8a:	72 4e       	sbci	r23, 0xE2	; 226
      8c:	18 09       	sbc	r17, r8
      8e:	00 10       	cpse	r0, r0
      90:	a5 d4       	rcall	.+2378   	; 0x9dc <i2c_start+0x2e>
      92:	e8 00       	.word	0x00e8	; ????
      94:	00 e8       	ldi	r16, 0x80	; 128
      96:	76 48       	sbci	r23, 0x86	; 134
      98:	17 00       	.word	0x0017	; ????
      9a:	00 e4       	ldi	r16, 0x40	; 64
      9c:	0b 54       	subi	r16, 0x4B	; 75
      9e:	02 00       	.word	0x0002	; ????
      a0:	00 ca       	rjmp	.-3072   	; 0xfffff4a2 <__eeprom_end+0xff7ef4a2>
      a2:	9a 3b       	cpi	r25, 0xBA	; 186
      a4:	00 00       	nop
      a6:	00 e1       	ldi	r16, 0x10	; 16
      a8:	f5 05       	cpc	r31, r5
      aa:	00 00       	nop
      ac:	80 96       	adiw	r24, 0x20	; 32
      ae:	98 00       	.word	0x0098	; ????
      b0:	00 00       	nop
      b2:	40 42       	sbci	r20, 0x20	; 32
      b4:	0f 00       	.word	0x000f	; ????
      b6:	00 00       	nop
      b8:	a0 86       	std	Z+8, r10	; 0x08
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 00       	nop
      be:	10 27       	eor	r17, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	e8 03       	fmulsu	r22, r16
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	64 00       	.word	0x0064	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	0a 00       	.word	0x000a	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	01 00       	.word	0x0001	; ????
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	2c 76       	andi	r18, 0x6C	; 108
      de:	d8 88       	ldd	r13, Y+16	; 0x10
      e0:	dc 67       	ori	r29, 0x7C	; 124
      e2:	4f 08       	sbc	r4, r15
      e4:	23 df       	rcall	.-442    	; 0xffffff2c <__eeprom_end+0xff7eff2c>
      e6:	c1 df       	rcall	.-126    	; 0x6a <__SREG__+0x2b>
      e8:	ae 59       	subi	r26, 0x9E	; 158
      ea:	e1 b1       	in	r30, 0x01	; 1
      ec:	b7 96       	adiw	r30, 0x27	; 39
      ee:	e5 e3       	ldi	r30, 0x35	; 53
      f0:	e4 53       	subi	r30, 0x34	; 52
      f2:	c6 3a       	cpi	r28, 0xA6	; 166
      f4:	e6 51       	subi	r30, 0x16	; 22
      f6:	99 76       	andi	r25, 0x69	; 105
      f8:	96 e8       	ldi	r25, 0x86	; 134
      fa:	e6 c2       	rjmp	.+1484   	; 0x6c8 <main+0x52>
      fc:	84 26       	eor	r8, r20
      fe:	eb 89       	ldd	r30, Y+19	; 0x13
     100:	8c 9b       	sbis	0x11, 4	; 17
     102:	62 ed       	ldi	r22, 0xD2	; 210
     104:	40 7c       	andi	r20, 0xC0	; 192
     106:	6f fc       	.word	0xfc6f	; ????
     108:	ef bc       	out	0x2f, r14	; 47
     10a:	9c 9f       	mul	r25, r28
     10c:	40 f2       	brcs	.-112    	; 0x9e <__trampolines_end+0x1c>
     10e:	ba a5       	ldd	r27, Y+42	; 0x2a
     110:	6f a5       	ldd	r22, Y+47	; 0x2f
     112:	f4 90       	lpm	r15, Z
     114:	05 5a       	subi	r16, 0xA5	; 165
     116:	2a f7       	brpl	.-54     	; 0xe2 <__trampolines_end+0x60>
     118:	5c 93       	st	X, r21
     11a:	6b 6c       	ori	r22, 0xCB	; 203
     11c:	f9 67       	ori	r31, 0x79	; 121
     11e:	6d c1       	rjmp	.+730    	; 0x3fa <mpu6050_init+0x4c>
     120:	1b fc       	.word	0xfc1b	; ????
     122:	e0 e4       	ldi	r30, 0x40	; 64
     124:	0d 47       	sbci	r16, 0x7D	; 125
     126:	fe f5       	brtc	.+126    	; 0x1a6 <.do_clear_bss_loop>
     128:	20 e6       	ldi	r18, 0x60	; 96
     12a:	b5 00       	.word	0x00b5	; ????
     12c:	d0 ed       	ldi	r29, 0xD0	; 208
     12e:	90 2e       	mov	r9, r16
     130:	03 00       	.word	0x0003	; ????
     132:	94 35       	cpi	r25, 0x54	; 84
     134:	77 05       	cpc	r23, r7
     136:	00 80       	ld	r0, Z
     138:	84 1e       	adc	r8, r20
     13a:	08 00       	.word	0x0008	; ????
     13c:	00 20       	and	r0, r0
     13e:	4e 0a       	sbc	r4, r30
     140:	00 00       	nop
     142:	00 c8       	rjmp	.-4096   	; 0xfffff144 <__eeprom_end+0xff7ef144>
     144:	0c 33       	cpi	r16, 0x3C	; 60
     146:	33 33       	cpi	r19, 0x33	; 51
     148:	33 0f       	add	r19, r19
     14a:	98 6e       	ori	r25, 0xE8	; 232
     14c:	12 83       	std	Z+2, r17	; 0x02
     14e:	11 41       	sbci	r17, 0x11	; 17
     150:	ef 8d       	ldd	r30, Y+31	; 0x1f
     152:	21 14       	cp	r2, r1
     154:	89 3b       	cpi	r24, 0xB9	; 185
     156:	e6 55       	subi	r30, 0x56	; 86
     158:	16 cf       	rjmp	.-468    	; 0xffffff86 <__eeprom_end+0xff7eff86>
     15a:	fe e6       	ldi	r31, 0x6E	; 110
     15c:	db 18       	sub	r13, r11
     15e:	d1 84       	ldd	r13, Z+9	; 0x09
     160:	4b 38       	cpi	r20, 0x8B	; 139
     162:	1b f7       	brvc	.-58     	; 0x12a <__trampolines_end+0xa8>
     164:	7c 1d       	adc	r23, r12
     166:	90 1d       	adc	r25, r0
     168:	a4 bb       	out	0x14, r26	; 20
     16a:	e4 24       	eor	r14, r4
     16c:	20 32       	cpi	r18, 0x20	; 32
     16e:	84 72       	andi	r24, 0x24	; 36
     170:	5e 22       	and	r5, r30
     172:	81 00       	.word	0x0081	; ????
     174:	c9 f1       	breq	.+114    	; 0x1e8 <mpu6050_readBytes+0x2e>
     176:	24 ec       	ldi	r18, 0xC4	; 196
     178:	a1 e5       	ldi	r26, 0x51	; 81
     17a:	3d 27       	eor	r19, r29

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf e5       	ldi	r28, 0x5F	; 95
     182:	d8 e0       	ldi	r29, 0x08	; 8
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	a0 e6       	ldi	r26, 0x60	; 96
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	e6 e6       	ldi	r30, 0x66	; 102
     190:	f5 e1       	ldi	r31, 0x15	; 21
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x10>
     194:	05 90       	lpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a4 36       	cpi	r26, 0x64	; 100
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0xc>

0000019e <__do_clear_bss>:
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	a4 e6       	ldi	r26, 0x64	; 100
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	a7 3b       	cpi	r26, 0xB7	; 183
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>
     1ae:	0e 94 3b 03 	call	0x676	; 0x676 <main>
     1b2:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <_exit>

000001b6 <__bad_interrupt>:
     1b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ba <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	18 2f       	mov	r17, r24
     1ca:	d6 2e       	mov	r13, r22
     1cc:	d4 2f       	mov	r29, r20
     1ce:	c5 2f       	mov	r28, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     1d0:	66 23       	and	r22, r22
     1d2:	51 f1       	breq	.+84     	; 0x228 <mpu6050_readBytes+0x6e>
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     1d4:	80 ed       	ldi	r24, 0xD0	; 208
     1d6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <i2c_start>
		i2c_write(regAddr);
     1da:	81 2f       	mov	r24, r17
     1dc:	0e 94 21 05 	call	0xa42	; 0xa42 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	8a 95       	dec	r24
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <mpu6050_readBytes+0x28>
     1e6:	00 00       	nop
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
     1e8:	81 ed       	ldi	r24, 0xD1	; 209
     1ea:	0e 94 d7 04 	call	0x9ae	; 0x9ae <i2c_start>
     1ee:	0d 2f       	mov	r16, r29
     1f0:	1c 2f       	mov	r17, r28
     1f2:	c0 e0       	ldi	r28, 0x00	; 0
     1f4:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     1f6:	ed 2c       	mov	r14, r13
     1f8:	f1 2c       	mov	r15, r1
     1fa:	e1 e0       	ldi	r30, 0x01	; 1
     1fc:	ee 1a       	sub	r14, r30
     1fe:	f1 08       	sbc	r15, r1
     200:	ce 15       	cp	r28, r14
     202:	df 05       	cpc	r29, r15
     204:	29 f4       	brne	.+10     	; 0x210 <mpu6050_readBytes+0x56>
				data[i] = i2c_readNak();
     206:	0e 94 53 05 	call	0xaa6	; 0xaa6 <i2c_readNak>
     20a:	f8 01       	movw	r30, r16
     20c:	80 83       	st	Z, r24
     20e:	04 c0       	rjmp	.+8      	; 0x218 <mpu6050_readBytes+0x5e>
			else
				data[i] = i2c_readAck();
     210:	0e 94 3d 05 	call	0xa7a	; 0xa7a <i2c_readAck>
     214:	f8 01       	movw	r30, r16
     216:	80 83       	st	Z, r24
     218:	21 96       	adiw	r28, 0x01	; 1
     21a:	0f 5f       	subi	r16, 0xFF	; 255
     21c:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
     21e:	cd 15       	cp	r28, r13
     220:	78 f3       	brcs	.-34     	; 0x200 <mpu6050_readBytes+0x46>
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
     222:	0e 94 14 05 	call	0xa28	; 0xa28 <i2c_stop>
     226:	01 c0       	rjmp	.+2      	; 0x22a <mpu6050_readBytes+0x70>
/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     228:	d1 2c       	mov	r13, r1
				data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     22a:	8d 2d       	mov	r24, r13
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	ff 90       	pop	r15
     236:	ef 90       	pop	r14
     238:	df 90       	pop	r13
     23a:	08 95       	ret

0000023c <mpu6050_readByte>:

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
     23c:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	0e 94 dd 00 	call	0x1ba	; 0x1ba <mpu6050_readBytes>
}
     244:	08 95       	ret

00000246 <mpu6050_writeBytes>:

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	c8 2f       	mov	r28, r24
     252:	06 2f       	mov	r16, r22
     254:	f4 2e       	mov	r15, r20
     256:	15 2f       	mov	r17, r21
	if(length > 0) {
     258:	66 23       	and	r22, r22
     25a:	89 f0       	breq	.+34     	; 0x27e <mpu6050_writeBytes+0x38>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     25c:	80 ed       	ldi	r24, 0xD0	; 208
     25e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <i2c_start>
		i2c_write(regAddr); //reg
     262:	8c 2f       	mov	r24, r28
     264:	0e 94 21 05 	call	0xa42	; 0xa42 <i2c_write>
     268:	cf 2d       	mov	r28, r15
     26a:	d1 2f       	mov	r29, r17
		for (uint8_t i = 0; i < length; i++) {
     26c:	10 e0       	ldi	r17, 0x00	; 0
			i2c_write((uint8_t) data[i]);
     26e:	89 91       	ld	r24, Y+
     270:	0e 94 21 05 	call	0xa42	; 0xa42 <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
     274:	1f 5f       	subi	r17, 0xFF	; 255
     276:	10 13       	cpse	r17, r16
     278:	fa cf       	rjmp	.-12     	; 0x26e <mpu6050_writeBytes+0x28>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
     27a:	0e 94 14 05 	call	0xa28	; 0xa28 <i2c_stop>
	}
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	08 95       	ret

0000028a <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	1f 92       	push	r1
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
     296:	ae 01       	movw	r20, r28
     298:	4f 5f       	subi	r20, 0xFF	; 255
     29a:	5f 4f       	sbci	r21, 0xFF	; 255
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	0e 94 23 01 	call	0x246	; 0x246 <mpu6050_writeBytes>
}
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <mpu6050_writeBits>:
}

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	1f 92       	push	r1
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	18 2f       	mov	r17, r24
     2be:	e6 2e       	mov	r14, r22
     2c0:	f4 2e       	mov	r15, r20
     2c2:	02 2f       	mov	r16, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
     2c4:	44 23       	and	r20, r20
     2c6:	91 f1       	breq	.+100    	; 0x32c <mpu6050_writeBits+0x82>
		uint8_t b = 0;
     2c8:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
     2ca:	be 01       	movw	r22, r28
     2cc:	6f 5f       	subi	r22, 0xFF	; 255
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	0e 94 1e 01 	call	0x23c	; 0x23c <mpu6050_readByte>
     2d4:	88 23       	and	r24, r24
     2d6:	51 f1       	breq	.+84     	; 0x32c <mpu6050_writeBits+0x82>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     2d8:	6e 2d       	mov	r22, r14
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	6f 19       	sub	r22, r15
     2de:	71 09       	sbc	r23, r1
     2e0:	6f 5f       	subi	r22, 0xFF	; 255
     2e2:	7f 4f       	sbci	r23, 0xFF	; 255
     2e4:	e1 e0       	ldi	r30, 0x01	; 1
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	af 01       	movw	r20, r30
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <mpu6050_writeBits+0x46>
     2ec:	44 0f       	add	r20, r20
     2ee:	55 1f       	adc	r21, r21
     2f0:	fa 94       	dec	r15
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <mpu6050_writeBits+0x42>
     2f4:	41 50       	subi	r20, 0x01	; 1
     2f6:	51 09       	sbc	r21, r1
     2f8:	06 2e       	mov	r0, r22
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <mpu6050_writeBits+0x56>
     2fc:	44 0f       	add	r20, r20
     2fe:	55 1f       	adc	r21, r21
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <mpu6050_writeBits+0x52>
			data <<= (bitStart - length + 1); // shift data into correct position
     304:	20 2f       	mov	r18, r16
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	c9 01       	movw	r24, r18
     30a:	02 c0       	rjmp	.+4      	; 0x310 <mpu6050_writeBits+0x66>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <mpu6050_writeBits+0x62>
     314:	bc 01       	movw	r22, r24
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
     316:	94 2f       	mov	r25, r20
     318:	90 95       	com	r25
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	89 23       	and	r24, r25
	if(length > 0) {
		uint8_t b = 0;
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
			data <<= (bitStart - length + 1); // shift data into correct position
			data &= mask; // zero all non-important bits in data
     31e:	46 23       	and	r20, r22
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
     320:	68 2f       	mov	r22, r24
     322:	64 2b       	or	r22, r20
     324:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
     326:	81 2f       	mov	r24, r17
     328:	0e 94 45 01 	call	0x28a	; 0x28a <mpu6050_writeByte>
		}
	}
}
     32c:	0f 90       	pop	r0
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	ef 90       	pop	r14
     33a:	08 95       	ret

0000033c <mpu6050_writeBit>:

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	1f 92       	push	r1
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	18 2f       	mov	r17, r24
     34e:	06 2f       	mov	r16, r22
     350:	f4 2e       	mov	r15, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
     352:	be 01       	movw	r22, r28
     354:	6f 5f       	subi	r22, 0xFF	; 255
     356:	7f 4f       	sbci	r23, 0xFF	; 255
     358:	0e 94 1e 01 	call	0x23c	; 0x23c <mpu6050_readByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     35c:	ff 20       	and	r15, r15
     35e:	59 f0       	breq	.+22     	; 0x376 <mpu6050_writeBit+0x3a>
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	b9 01       	movw	r22, r18
     366:	02 c0       	rjmp	.+4      	; 0x36c <mpu6050_writeBit+0x30>
     368:	66 0f       	add	r22, r22
     36a:	77 1f       	adc	r23, r23
     36c:	0a 95       	dec	r16
     36e:	e2 f7       	brpl	.-8      	; 0x368 <mpu6050_writeBit+0x2c>
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	68 2b       	or	r22, r24
     374:	0b c0       	rjmp	.+22     	; 0x38c <mpu6050_writeBit+0x50>
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	b9 01       	movw	r22, r18
     37c:	02 c0       	rjmp	.+4      	; 0x382 <mpu6050_writeBit+0x46>
     37e:	66 0f       	add	r22, r22
     380:	77 1f       	adc	r23, r23
     382:	0a 95       	dec	r16
     384:	e2 f7       	brpl	.-8      	; 0x37e <mpu6050_writeBit+0x42>
     386:	60 95       	com	r22
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	68 23       	and	r22, r24
     38c:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
     38e:	81 2f       	mov	r24, r17
     390:	0e 94 45 01 	call	0x28a	; 0x28a <mpu6050_writeByte>
}
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	08 95       	ret

000003a2 <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	66 e0       	ldi	r22, 0x06	; 6
     3a6:	8b e6       	ldi	r24, 0x6B	; 107
     3a8:	0e 94 9e 01 	call	0x33c	; 0x33c <mpu6050_writeBit>
     3ac:	08 95       	ret

000003ae <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     3ae:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <i2c_init>
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <mpu6050_init+0x6>
     3b8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ba:	87 ea       	ldi	r24, 0xA7	; 167
     3bc:	91 e6       	ldi	r25, 0x61	; 97
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <mpu6050_init+0x10>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <mpu6050_init+0x16>
     3c4:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     3c6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <mpu6050_setSleepDisabled>
     3ca:	83 ec       	ldi	r24, 0xC3	; 195
     3cc:	99 e0       	ldi	r25, 0x09	; 9
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <mpu6050_init+0x20>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <mpu6050_init+0x26>
     3d4:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     3d6:	21 e0       	ldi	r18, 0x01	; 1
     3d8:	43 e0       	ldi	r20, 0x03	; 3
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	8b e6       	ldi	r24, 0x6B	; 107
     3de:	0e 94 55 01 	call	0x2aa	; 0x2aa <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     3e2:	23 e0       	ldi	r18, 0x03	; 3
     3e4:	43 e0       	ldi	r20, 0x03	; 3
     3e6:	62 e0       	ldi	r22, 0x02	; 2
     3e8:	8a e1       	ldi	r24, 0x1A	; 26
     3ea:	0e 94 55 01 	call	0x2aa	; 0x2aa <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     3ee:	64 e0       	ldi	r22, 0x04	; 4
     3f0:	89 e1       	ldi	r24, 0x19	; 25
     3f2:	0e 94 45 01 	call	0x28a	; 0x28a <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     3f6:	23 e0       	ldi	r18, 0x03	; 3
     3f8:	42 e0       	ldi	r20, 0x02	; 2
     3fa:	64 e0       	ldi	r22, 0x04	; 4
     3fc:	8b e1       	ldi	r24, 0x1B	; 27
     3fe:	0e 94 55 01 	call	0x2aa	; 0x2aa <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	42 e0       	ldi	r20, 0x02	; 2
     406:	64 e0       	ldi	r22, 0x04	; 4
     408:	8c e1       	ldi	r24, 0x1C	; 28
     40a:	0e 94 55 01 	call	0x2aa	; 0x2aa <mpu6050_writeBits>
     40e:	08 95       	ret

00000410 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     410:	8f 92       	push	r8
     412:	9f 92       	push	r9
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	4c 01       	movw	r8, r24
     42a:	5b 01       	movw	r10, r22
     42c:	6a 01       	movw	r12, r20
     42e:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     430:	49 ea       	ldi	r20, 0xA9	; 169
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	6e e0       	ldi	r22, 0x0E	; 14
     436:	8b e3       	ldi	r24, 0x3B	; 59
     438:	0e 94 dd 00 	call	0x1ba	; 0x1ba <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     43c:	20 91 a9 00 	lds	r18, 0x00A9
     440:	80 91 aa 00 	lds	r24, 0x00AA
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	92 2b       	or	r25, r18
     448:	f4 01       	movw	r30, r8
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     44e:	20 91 ab 00 	lds	r18, 0x00AB
     452:	80 91 ac 00 	lds	r24, 0x00AC
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	92 2b       	or	r25, r18
     45a:	f5 01       	movw	r30, r10
     45c:	91 83       	std	Z+1, r25	; 0x01
     45e:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     460:	20 91 ad 00 	lds	r18, 0x00AD
     464:	80 91 ae 00 	lds	r24, 0x00AE
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	92 2b       	or	r25, r18
     46c:	f6 01       	movw	r30, r12
     46e:	91 83       	std	Z+1, r25	; 0x01
     470:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     472:	20 91 b1 00 	lds	r18, 0x00B1
     476:	80 91 b2 00 	lds	r24, 0x00B2
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	92 2b       	or	r25, r18
     47e:	99 83       	std	Y+1, r25	; 0x01
     480:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     482:	20 91 b3 00 	lds	r18, 0x00B3
     486:	80 91 b4 00 	lds	r24, 0x00B4
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	92 2b       	or	r25, r18
     48e:	f8 01       	movw	r30, r16
     490:	91 83       	std	Z+1, r25	; 0x01
     492:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     494:	20 91 b5 00 	lds	r18, 0x00B5
     498:	80 91 b6 00 	lds	r24, 0x00B6
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	92 2b       	or	r25, r18
     4a0:	f7 01       	movw	r30, r14
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	80 83       	st	Z, r24
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	08 95       	ret

000004c0 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
     4c0:	2f 92       	push	r2
     4c2:	3f 92       	push	r3
     4c4:	4f 92       	push	r4
     4c6:	5f 92       	push	r5
     4c8:	6f 92       	push	r6
     4ca:	7f 92       	push	r7
     4cc:	8f 92       	push	r8
     4ce:	9f 92       	push	r9
     4d0:	af 92       	push	r10
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	2c 97       	sbiw	r28, 0x0c	; 12
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	3c 01       	movw	r6, r24
     4f6:	4b 01       	movw	r8, r22
     4f8:	5a 01       	movw	r10, r20
     4fa:	69 01       	movw	r12, r18
     4fc:	28 01       	movw	r4, r16
     4fe:	17 01       	movw	r2, r14
	int16_t ax = 0;
     500:	1a 82       	std	Y+2, r1	; 0x02
     502:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     504:	1c 82       	std	Y+4, r1	; 0x04
     506:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     508:	1e 82       	std	Y+6, r1	; 0x06
     50a:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     50c:	18 86       	std	Y+8, r1	; 0x08
     50e:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     510:	1a 86       	std	Y+10, r1	; 0x0a
     512:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     514:	1c 86       	std	Y+12, r1	; 0x0c
     516:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     518:	ce 01       	movw	r24, r28
     51a:	0b 96       	adiw	r24, 0x0b	; 11
     51c:	7c 01       	movw	r14, r24
     51e:	8e 01       	movw	r16, r28
     520:	07 5f       	subi	r16, 0xF7	; 247
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	9e 01       	movw	r18, r28
     526:	29 5f       	subi	r18, 0xF9	; 249
     528:	3f 4f       	sbci	r19, 0xFF	; 255
     52a:	ae 01       	movw	r20, r28
     52c:	4b 5f       	subi	r20, 0xFB	; 251
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
     530:	be 01       	movw	r22, r28
     532:	6d 5f       	subi	r22, 0xFD	; 253
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	0a 97       	sbiw	r24, 0x0a	; 10
     538:	0e 94 08 02 	call	0x410	; 0x410 <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
     53c:	69 81       	ldd	r22, Y+1	; 0x01
     53e:	7a 81       	ldd	r23, Y+2	; 0x02
     540:	88 27       	eor	r24, r24
     542:	77 fd       	sbrc	r23, 7
     544:	80 95       	com	r24
     546:	98 2f       	mov	r25, r24
     548:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	58 e3       	ldi	r21, 0x38	; 56
     554:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     558:	f3 01       	movw	r30, r6
     55a:	60 83       	st	Z, r22
     55c:	71 83       	std	Z+1, r23	; 0x01
     55e:	82 83       	std	Z+2, r24	; 0x02
     560:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
     562:	6b 81       	ldd	r22, Y+3	; 0x03
     564:	7c 81       	ldd	r23, Y+4	; 0x04
     566:	88 27       	eor	r24, r24
     568:	77 fd       	sbrc	r23, 7
     56a:	80 95       	com	r24
     56c:	98 2f       	mov	r25, r24
     56e:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e8       	ldi	r20, 0x80	; 128
     578:	58 e3       	ldi	r21, 0x38	; 56
     57a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     57e:	f4 01       	movw	r30, r8
     580:	60 83       	st	Z, r22
     582:	71 83       	std	Z+1, r23	; 0x01
     584:	82 83       	std	Z+2, r24	; 0x02
     586:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
     588:	6d 81       	ldd	r22, Y+5	; 0x05
     58a:	7e 81       	ldd	r23, Y+6	; 0x06
     58c:	88 27       	eor	r24, r24
     58e:	77 fd       	sbrc	r23, 7
     590:	80 95       	com	r24
     592:	98 2f       	mov	r25, r24
     594:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e8       	ldi	r20, 0x80	; 128
     59e:	58 e3       	ldi	r21, 0x38	; 56
     5a0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     5a4:	f5 01       	movw	r30, r10
     5a6:	60 83       	st	Z, r22
     5a8:	71 83       	std	Z+1, r23	; 0x01
     5aa:	82 83       	std	Z+2, r24	; 0x02
     5ac:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
     5ae:	6f 81       	ldd	r22, Y+7	; 0x07
     5b0:	78 85       	ldd	r23, Y+8	; 0x08
     5b2:	88 27       	eor	r24, r24
     5b4:	77 fd       	sbrc	r23, 7
     5b6:	80 95       	com	r24
     5b8:	98 2f       	mov	r25, r24
     5ba:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	48 e0       	ldi	r20, 0x08	; 8
     5c4:	51 e4       	ldi	r21, 0x41	; 65
     5c6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     5ca:	23 e3       	ldi	r18, 0x33	; 51
     5cc:	33 e3       	ldi	r19, 0x33	; 51
     5ce:	43 e8       	ldi	r20, 0x83	; 131
     5d0:	51 e4       	ldi	r21, 0x41	; 65
     5d2:	0e 94 b2 06 	call	0xd64	; 0xd64 <__divsf3>
     5d6:	f6 01       	movw	r30, r12
     5d8:	60 83       	st	Z, r22
     5da:	71 83       	std	Z+1, r23	; 0x01
     5dc:	82 83       	std	Z+2, r24	; 0x02
     5de:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
     5e0:	69 85       	ldd	r22, Y+9	; 0x09
     5e2:	7a 85       	ldd	r23, Y+10	; 0x0a
     5e4:	88 27       	eor	r24, r24
     5e6:	77 fd       	sbrc	r23, 7
     5e8:	80 95       	com	r24
     5ea:	98 2f       	mov	r25, r24
     5ec:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	48 e9       	ldi	r20, 0x98	; 152
     5f6:	50 e4       	ldi	r21, 0x40	; 64
     5f8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__subsf3>
     5fc:	23 e3       	ldi	r18, 0x33	; 51
     5fe:	33 e3       	ldi	r19, 0x33	; 51
     600:	43 e8       	ldi	r20, 0x83	; 131
     602:	51 e4       	ldi	r21, 0x41	; 65
     604:	0e 94 b2 06 	call	0xd64	; 0xd64 <__divsf3>
     608:	f2 01       	movw	r30, r4
     60a:	60 83       	st	Z, r22
     60c:	71 83       	std	Z+1, r23	; 0x01
     60e:	82 83       	std	Z+2, r24	; 0x02
     610:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
     612:	6b 85       	ldd	r22, Y+11	; 0x0b
     614:	7c 85       	ldd	r23, Y+12	; 0x0c
     616:	88 27       	eor	r24, r24
     618:	77 fd       	sbrc	r23, 7
     61a:	80 95       	com	r24
     61c:	98 2f       	mov	r25, r24
     61e:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	44 ea       	ldi	r20, 0xA4	; 164
     628:	51 e4       	ldi	r21, 0x41	; 65
     62a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     62e:	23 e3       	ldi	r18, 0x33	; 51
     630:	33 e3       	ldi	r19, 0x33	; 51
     632:	43 e8       	ldi	r20, 0x83	; 131
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	0e 94 b2 06 	call	0xd64	; 0xd64 <__divsf3>
     63a:	f1 01       	movw	r30, r2
     63c:	60 83       	st	Z, r22
     63e:	71 83       	std	Z+1, r23	; 0x01
     640:	82 83       	std	Z+2, r24	; 0x02
     642:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
     644:	2c 96       	adiw	r28, 0x0c	; 12
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	bf 90       	pop	r11
     662:	af 90       	pop	r10
     664:	9f 90       	pop	r9
     666:	8f 90       	pop	r8
     668:	7f 90       	pop	r7
     66a:	6f 90       	pop	r6
     66c:	5f 90       	pop	r5
     66e:	4f 90       	pop	r4
     670:	3f 90       	pop	r3
     672:	2f 90       	pop	r2
     674:	08 95       	ret

00000676 <main>:
#include "mpu6050.h"

#define UART_BAUD_RATE 57600
#include "uart.h"

int main(void) {
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	ec 97       	sbiw	r28, 0x3c	; 60
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61

	#if MPU6050_GETATTITUDE == 0
    int16_t ax = 0;
     68a:	1a 82       	std	Y+2, r1	; 0x02
     68c:	19 82       	std	Y+1, r1	; 0x01
    int16_t ay = 0;
     68e:	1c 82       	std	Y+4, r1	; 0x04
     690:	1b 82       	std	Y+3, r1	; 0x03
    int16_t az = 0;
     692:	1e 82       	std	Y+6, r1	; 0x06
     694:	1d 82       	std	Y+5, r1	; 0x05
    int16_t gx = 0;
     696:	18 86       	std	Y+8, r1	; 0x08
     698:	1f 82       	std	Y+7, r1	; 0x07
    int16_t gy = 0;
     69a:	1a 86       	std	Y+10, r1	; 0x0a
     69c:	19 86       	std	Y+9, r1	; 0x09
    int16_t gz = 0;
     69e:	1c 86       	std	Y+12, r1	; 0x0c
     6a0:	1b 86       	std	Y+11, r1	; 0x0b
    double axg = 0;
     6a2:	1d 86       	std	Y+13, r1	; 0x0d
     6a4:	1e 86       	std	Y+14, r1	; 0x0e
     6a6:	1f 86       	std	Y+15, r1	; 0x0f
     6a8:	18 8a       	std	Y+16, r1	; 0x10
    double ayg = 0;
     6aa:	19 8a       	std	Y+17, r1	; 0x11
     6ac:	1a 8a       	std	Y+18, r1	; 0x12
     6ae:	1b 8a       	std	Y+19, r1	; 0x13
     6b0:	1c 8a       	std	Y+20, r1	; 0x14
    double azg = 0;
     6b2:	1d 8a       	std	Y+21, r1	; 0x15
     6b4:	1e 8a       	std	Y+22, r1	; 0x16
     6b6:	1f 8a       	std	Y+23, r1	; 0x17
     6b8:	18 8e       	std	Y+24, r1	; 0x18
    double gxds = 0;
     6ba:	19 8e       	std	Y+25, r1	; 0x19
     6bc:	1a 8e       	std	Y+26, r1	; 0x1a
     6be:	1b 8e       	std	Y+27, r1	; 0x1b
     6c0:	1c 8e       	std	Y+28, r1	; 0x1c
    double gyds = 0;
     6c2:	1d 8e       	std	Y+29, r1	; 0x1d
     6c4:	1e 8e       	std	Y+30, r1	; 0x1e
     6c6:	1f 8e       	std	Y+31, r1	; 0x1f
     6c8:	18 a2       	std	Y+32, r1	; 0x20
    double gzds = 0;
     6ca:	19 a2       	std	Y+33, r1	; 0x21
     6cc:	1a a2       	std	Y+34, r1	; 0x22
     6ce:	1b a2       	std	Y+35, r1	; 0x23
     6d0:	1c a2       	std	Y+36, r1	; 0x24
	double previous_error = 0 ;
	double outputspeed = 0;
	#endif
	
	#if MPU6050_GETATTITUDE == 0
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     6d2:	ce 01       	movw	r24, r28
     6d4:	0b 96       	adiw	r24, 0x0b	; 11
     6d6:	7c 01       	movw	r14, r24
     6d8:	8e 01       	movw	r16, r28
     6da:	07 5f       	subi	r16, 0xF7	; 247
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	9e 01       	movw	r18, r28
     6e0:	29 5f       	subi	r18, 0xF9	; 249
     6e2:	3f 4f       	sbci	r19, 0xFF	; 255
     6e4:	ae 01       	movw	r20, r28
     6e6:	4b 5f       	subi	r20, 0xFB	; 251
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	be 01       	movw	r22, r28
     6ec:	6d 5f       	subi	r22, 0xFD	; 253
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	0a 97       	sbiw	r24, 0x0a	; 10
     6f2:	0e 94 08 02 	call	0x410	; 0x410 <mpu6050_getRawData>
	mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     6f6:	ce 01       	movw	r24, r28
     6f8:	81 96       	adiw	r24, 0x21	; 33
     6fa:	7c 01       	movw	r14, r24
     6fc:	0c 5e       	subi	r16, 0xEC	; 236
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	9e 01       	movw	r18, r28
     702:	27 5e       	subi	r18, 0xE7	; 231
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	ae 01       	movw	r20, r28
     708:	4b 5e       	subi	r20, 0xEB	; 235
     70a:	5f 4f       	sbci	r21, 0xFF	; 255
     70c:	be 01       	movw	r22, r28
     70e:	6f 5e       	subi	r22, 0xEF	; 239
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	44 97       	sbiw	r24, 0x14	; 20
     714:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mpu6050_getConvData>
	accXangle = (atan2(ayg,azg)+PI)*RAD_TO_DEG;
	gyroXangle = accXangle;
	#endif

    //init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     718:	8f e0       	ldi	r24, 0x0F	; 15
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <uart_init>

	//init interrupt
	sei();
     720:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     722:	0e 94 d7 01 	call	0x3ae	; 0x3ae <mpu6050_init>
     726:	9f ef       	ldi	r25, 0xFF	; 255
     728:	2f e3       	ldi	r18, 0x3F	; 63
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	91 50       	subi	r25, 0x01	; 1
     72e:	20 40       	sbci	r18, 0x00	; 0
     730:	80 40       	sbci	r24, 0x00	; 0
     732:	e1 f7       	brne	.-8      	; 0x72c <main+0xb6>
     734:	00 c0       	rjmp	.+0      	; 0x736 <main+0xc0>
     736:	00 00       	nop
	double  gyroXangle = 0;
	double Xangle = 0 ;
	double error = 0;
	double I_error = 0;
	double D_error = 0;
	double previous_error = 0 ;
     738:	81 2c       	mov	r8, r1
     73a:	91 2c       	mov	r9, r1
     73c:	a1 2c       	mov	r10, r1
     73e:	b1 2c       	mov	r11, r1
    double gzds = 0;
	double accXangle = 0;
	double  gyroXangle = 0;
	double Xangle = 0 ;
	double error = 0;
	double I_error = 0;
     740:	41 2c       	mov	r4, r1
     742:	51 2c       	mov	r5, r1
     744:	32 01       	movw	r6, r4
	//init mpu6050
	mpu6050_init();
	_delay_ms(50);
	for(;;) {
		#if MPU6050_GETATTITUDE == 0
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     746:	ce 01       	movw	r24, r28
     748:	0b 96       	adiw	r24, 0x0b	; 11
     74a:	7c 01       	movw	r14, r24
     74c:	8e 01       	movw	r16, r28
     74e:	07 5f       	subi	r16, 0xF7	; 247
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	9e 01       	movw	r18, r28
     754:	29 5f       	subi	r18, 0xF9	; 249
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	ae 01       	movw	r20, r28
     75a:	4b 5f       	subi	r20, 0xFB	; 251
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	be 01       	movw	r22, r28
     760:	6d 5f       	subi	r22, 0xFD	; 253
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	0a 97       	sbiw	r24, 0x0a	; 10
     766:	0e 94 08 02 	call	0x410	; 0x410 <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     76a:	ce 01       	movw	r24, r28
     76c:	81 96       	adiw	r24, 0x21	; 33
     76e:	7c 01       	movw	r14, r24
     770:	0c 5e       	subi	r16, 0xEC	; 236
     772:	1f 4f       	sbci	r17, 0xFF	; 255
     774:	9e 01       	movw	r18, r28
     776:	27 5e       	subi	r18, 0xE7	; 231
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	ae 01       	movw	r20, r28
     77c:	4b 5e       	subi	r20, 0xEB	; 235
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	be 01       	movw	r22, r28
     782:	6f 5e       	subi	r22, 0xEF	; 239
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	44 97       	sbiw	r24, 0x14	; 20
     788:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mpu6050_getConvData>
		#endif
		
        accXangle = (atan2(ayg,azg)+PI)*RAD_TO_DEG;
     78c:	2d 89       	ldd	r18, Y+21	; 0x15
     78e:	3e 89       	ldd	r19, Y+22	; 0x16
     790:	4f 89       	ldd	r20, Y+23	; 0x17
     792:	58 8d       	ldd	r21, Y+24	; 0x18
     794:	69 89       	ldd	r22, Y+17	; 0x11
     796:	7a 89       	ldd	r23, Y+18	; 0x12
     798:	8b 89       	ldd	r24, Y+19	; 0x13
     79a:	9c 89       	ldd	r25, Y+20	; 0x14
     79c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <atan2>
     7a0:	2b ed       	ldi	r18, 0xDB	; 219
     7a2:	3f e0       	ldi	r19, 0x0F	; 15
     7a4:	49 e4       	ldi	r20, 0x49	; 73
     7a6:	50 e4       	ldi	r21, 0x40	; 64
     7a8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     7ac:	21 ee       	ldi	r18, 0xE1	; 225
     7ae:	3e e2       	ldi	r19, 0x2E	; 46
     7b0:	45 e6       	ldi	r20, 0x65	; 101
     7b2:	52 e4       	ldi	r21, 0x42	; 66
     7b4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     7b8:	69 ab       	std	Y+49, r22	; 0x31
     7ba:	7a ab       	std	Y+50, r23	; 0x32
     7bc:	8b ab       	std	Y+51, r24	; 0x33
     7be:	9c ab       	std	Y+52, r25	; 0x34
		gyroXangle = accXangle + gxds*dt;
     7c0:	29 ec       	ldi	r18, 0xC9	; 201
     7c2:	3e e8       	ldi	r19, 0x8E	; 142
     7c4:	4d e0       	ldi	r20, 0x0D	; 13
     7c6:	5a e3       	ldi	r21, 0x3A	; 58
     7c8:	69 8d       	ldd	r22, Y+25	; 0x19
     7ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7d0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     7d4:	29 a9       	ldd	r18, Y+49	; 0x31
     7d6:	3a a9       	ldd	r19, Y+50	; 0x32
     7d8:	4b a9       	ldd	r20, Y+51	; 0x33
     7da:	5c a9       	ldd	r21, Y+52	; 0x34
     7dc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     7e0:	6d ab       	std	Y+53, r22	; 0x35
     7e2:	7e ab       	std	Y+54, r23	; 0x36
     7e4:	8f ab       	std	Y+55, r24	; 0x37
     7e6:	98 af       	std	Y+56, r25	; 0x38
		Xangle = 0.98*gyroXangle + 0.02*accXangle;
     7e8:	28 e4       	ldi	r18, 0x48	; 72
     7ea:	31 ee       	ldi	r19, 0xE1	; 225
     7ec:	4a e7       	ldi	r20, 0x7A	; 122
     7ee:	5f e3       	ldi	r21, 0x3F	; 63
     7f0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     7f4:	6b 01       	movw	r12, r22
     7f6:	7c 01       	movw	r14, r24
     7f8:	2a e0       	ldi	r18, 0x0A	; 10
     7fa:	37 ed       	ldi	r19, 0xD7	; 215
     7fc:	43 ea       	ldi	r20, 0xA3	; 163
     7fe:	5c e3       	ldi	r21, 0x3C	; 60
     800:	69 a9       	ldd	r22, Y+49	; 0x31
     802:	7a a9       	ldd	r23, Y+50	; 0x32
     804:	8b a9       	ldd	r24, Y+51	; 0x33
     806:	9c a9       	ldd	r25, Y+52	; 0x34
     808:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	c7 01       	movw	r24, r14
     812:	b6 01       	movw	r22, r12
     814:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     818:	69 af       	std	Y+57, r22	; 0x39
     81a:	7a af       	std	Y+58, r23	; 0x3a
     81c:	8b af       	std	Y+59, r24	; 0x3b
     81e:	9c af       	std	Y+60, r25	; 0x3c
		
		error = 180 - Xangle;
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	84 e3       	ldi	r24, 0x34	; 52
     82a:	93 e4       	ldi	r25, 0x43	; 67
     82c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__subsf3>
     830:	36 2e       	mov	r3, r22
     832:	27 2e       	mov	r2, r23
     834:	8f a7       	std	Y+47, r24	; 0x2f
     836:	98 ab       	std	Y+48, r25	; 0x30
		I_error += (error)*dt;
     838:	29 ec       	ldi	r18, 0xC9	; 201
     83a:	3e e8       	ldi	r19, 0x8E	; 142
     83c:	4d e0       	ldi	r20, 0x0D	; 13
     83e:	5a e3       	ldi	r21, 0x3A	; 58
     840:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	c3 01       	movw	r24, r6
     84a:	b2 01       	movw	r22, r4
     84c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     850:	2b 01       	movw	r4, r22
     852:	3c 01       	movw	r6, r24
		D_error = (error - previous_error)/dt;
     854:	28 2d       	mov	r18, r8
     856:	39 2d       	mov	r19, r9
     858:	4a 2d       	mov	r20, r10
     85a:	5b 2d       	mov	r21, r11
     85c:	63 2d       	mov	r22, r3
     85e:	72 2d       	mov	r23, r2
     860:	8f a5       	ldd	r24, Y+47	; 0x2f
     862:	98 a9       	ldd	r25, Y+48	; 0x30
     864:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__subsf3>
     868:	29 ec       	ldi	r18, 0xC9	; 201
     86a:	3e e8       	ldi	r19, 0x8E	; 142
     86c:	4d e0       	ldi	r20, 0x0D	; 13
     86e:	5a e3       	ldi	r21, 0x3A	; 58
     870:	0e 94 b2 06 	call	0xd64	; 0xd64 <__divsf3>
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24
		
		outputspeed = (P_GAIN * error) + (I_GAIN * I_error) + (D_GAIN * D_error);
     878:	2d ec       	ldi	r18, 0xCD	; 205
     87a:	3c ec       	ldi	r19, 0xCC	; 204
     87c:	4c e4       	ldi	r20, 0x4C	; 76
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	63 2d       	mov	r22, r3
     882:	72 2d       	mov	r23, r2
     884:	8f a5       	ldd	r24, Y+47	; 0x2f
     886:	98 a9       	ldd	r25, Y+48	; 0x30
     888:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     88c:	4b 01       	movw	r8, r22
     88e:	5c 01       	movw	r10, r24
     890:	2a e0       	ldi	r18, 0x0A	; 10
     892:	37 ed       	ldi	r19, 0xD7	; 215
     894:	43 ea       	ldi	r20, 0xA3	; 163
     896:	5b e3       	ldi	r21, 0x3B	; 59
     898:	c3 01       	movw	r24, r6
     89a:	b2 01       	movw	r22, r4
     89c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c5 01       	movw	r24, r10
     8a6:	b4 01       	movw	r22, r8
     8a8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     8ac:	4b 01       	movw	r8, r22
     8ae:	5c 01       	movw	r10, r24
     8b0:	2a e0       	ldi	r18, 0x0A	; 10
     8b2:	37 ed       	ldi	r19, 0xD7	; 215
     8b4:	43 e2       	ldi	r20, 0x23	; 35
     8b6:	5c e3       	ldi	r21, 0x3C	; 60
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__mulsf3>
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
     8c4:	c5 01       	movw	r24, r10
     8c6:	b4 01       	movw	r22, r8
     8c8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__addsf3>
     8cc:	4b 01       	movw	r8, r22
     8ce:	5c 01       	movw	r10, r24
		dtostrf(ayg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		dtostrf(azg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		dtostrf(gxds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');*/
		dtostrf(accXangle, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     8d0:	08 5f       	subi	r16, 0xF8	; 248
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	25 e0       	ldi	r18, 0x05	; 5
     8d6:	43 e0       	ldi	r20, 0x03	; 3
     8d8:	69 a9       	ldd	r22, Y+49	; 0x31
     8da:	7a a9       	ldd	r23, Y+50	; 0x32
     8dc:	8b a9       	ldd	r24, Y+51	; 0x33
     8de:	9c a9       	ldd	r25, Y+52	; 0x34
     8e0:	0e 94 3a 08 	call	0x1074	; 0x1074 <dtostrf>
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
     8ea:	80 e2       	ldi	r24, 0x20	; 32
     8ec:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
		dtostrf(gyroXangle, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     8f0:	25 e0       	ldi	r18, 0x05	; 5
     8f2:	43 e0       	ldi	r20, 0x03	; 3
     8f4:	6d a9       	ldd	r22, Y+53	; 0x35
     8f6:	7e a9       	ldd	r23, Y+54	; 0x36
     8f8:	8f a9       	ldd	r24, Y+55	; 0x37
     8fa:	98 ad       	ldd	r25, Y+56	; 0x38
     8fc:	0e 94 3a 08 	call	0x1074	; 0x1074 <dtostrf>
     900:	c8 01       	movw	r24, r16
     902:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
     906:	80 e2       	ldi	r24, 0x20	; 32
     908:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
		dtostrf(Xangle, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     90c:	25 e0       	ldi	r18, 0x05	; 5
     90e:	43 e0       	ldi	r20, 0x03	; 3
     910:	69 ad       	ldd	r22, Y+57	; 0x39
     912:	7a ad       	ldd	r23, Y+58	; 0x3a
     914:	8b ad       	ldd	r24, Y+59	; 0x3b
     916:	9c ad       	ldd	r25, Y+60	; 0x3c
     918:	0e 94 3a 08 	call	0x1074	; 0x1074 <dtostrf>
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
     922:	80 e2       	ldi	r24, 0x20	; 32
     924:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
		dtostrf(error, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     928:	25 e0       	ldi	r18, 0x05	; 5
     92a:	43 e0       	ldi	r20, 0x03	; 3
     92c:	63 2d       	mov	r22, r3
     92e:	72 2d       	mov	r23, r2
     930:	8f a5       	ldd	r24, Y+47	; 0x2f
     932:	98 a9       	ldd	r25, Y+48	; 0x30
     934:	0e 94 3a 08 	call	0x1074	; 0x1074 <dtostrf>
     938:	c8 01       	movw	r24, r16
     93a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
     93e:	80 e2       	ldi	r24, 0x20	; 32
     940:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
		dtostrf(I_error, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     944:	25 e0       	ldi	r18, 0x05	; 5
     946:	43 e0       	ldi	r20, 0x03	; 3
     948:	c3 01       	movw	r24, r6
     94a:	b2 01       	movw	r22, r4
     94c:	0e 94 3a 08 	call	0x1074	; 0x1074 <dtostrf>
     950:	c8 01       	movw	r24, r16
     952:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
		dtostrf(D_error, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     95c:	25 e0       	ldi	r18, 0x05	; 5
     95e:	43 e0       	ldi	r20, 0x03	; 3
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 3a 08 	call	0x1074	; 0x1074 <dtostrf>
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
     96e:	80 e2       	ldi	r24, 0x20	; 32
     970:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
		dtostrf(outputspeed, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     974:	25 e0       	ldi	r18, 0x05	; 5
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	c5 01       	movw	r24, r10
     97a:	b4 01       	movw	r22, r8
     97c:	0e 94 3a 08 	call	0x1074	; 0x1074 <dtostrf>
     980:	c8 01       	movw	r24, r16
     982:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
     986:	80 e2       	ldi	r24, 0x20	; 32
     988:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
		uart_puts("\r\n");
     98c:	80 e6       	ldi	r24, 0x60	; 96
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>

		uart_puts("\r\n");
     994:	80 e6       	ldi	r24, 0x60	; 96
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <uart_puts>
		error = 180 - Xangle;
		I_error += (error)*dt;
		D_error = (error - previous_error)/dt;
		
		outputspeed = (P_GAIN * error) + (I_GAIN * I_error) + (D_GAIN * D_error);
		previous_error = error;
     99c:	83 2c       	mov	r8, r3
     99e:	92 2c       	mov	r9, r2
     9a0:	af a4       	ldd	r10, Y+47	; 0x2f
     9a2:	b8 a8       	ldd	r11, Y+48	; 0x30
     9a4:	d0 ce       	rjmp	.-608    	; 0x746 <main+0xd0>

000009a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     9a6:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     9a8:	8c e0       	ldi	r24, 0x0C	; 12
     9aa:	80 b9       	out	0x00, r24	; 0
     9ac:	08 95       	ret

000009ae <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     9ae:	94 ea       	ldi	r25, 0xA4	; 164
     9b0:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     9b2:	4f ef       	ldi	r20, 0xFF	; 255
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     9ba:	06 b6       	in	r0, 0x36	; 54
     9bc:	07 fc       	sbrc	r0, 7
     9be:	06 c0       	rjmp	.+12     	; 0x9cc <i2c_start+0x1e>
     9c0:	41 50       	subi	r20, 0x01	; 1
     9c2:	51 09       	sbc	r21, r1
     9c4:	61 09       	sbc	r22, r1
     9c6:	71 09       	sbc	r23, r1
     9c8:	c0 f7       	brcc	.-16     	; 0x9ba <i2c_start+0xc>
     9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <i2c_start+0x26>
	if(i2c_timer == 0)
     9cc:	45 2b       	or	r20, r21
     9ce:	46 2b       	or	r20, r22
     9d0:	47 2b       	or	r20, r23
     9d2:	11 f1       	breq	.+68     	; 0xa18 <i2c_start+0x6a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     9d4:	91 b1       	in	r25, 0x01	; 1
     9d6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     9d8:	98 30       	cpi	r25, 0x08	; 8
     9da:	11 f0       	breq	.+4      	; 0x9e0 <i2c_start+0x32>
     9dc:	90 31       	cpi	r25, 0x10	; 16
     9de:	f1 f4       	brne	.+60     	; 0xa1c <i2c_start+0x6e>

	// send device address
	TWDR = address;
     9e0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     9e2:	84 e8       	ldi	r24, 0x84	; 132
     9e4:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     9ee:	06 b6       	in	r0, 0x36	; 54
     9f0:	07 fc       	sbrc	r0, 7
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <i2c_start+0x50>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	c8 f7       	brcc	.-14     	; 0x9ee <i2c_start+0x40>
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <i2c_start+0x58>
	if(i2c_timer == 0)
     9fe:	89 2b       	or	r24, r25
     a00:	8a 2b       	or	r24, r26
     a02:	8b 2b       	or	r24, r27
     a04:	69 f0       	breq	.+26     	; 0xa20 <i2c_start+0x72>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     a06:	91 b1       	in	r25, 0x01	; 1
     a08:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     a0a:	98 31       	cpi	r25, 0x18	; 24
     a0c:	59 f0       	breq	.+22     	; 0xa24 <i2c_start+0x76>
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 34       	cpi	r25, 0x40	; 64
     a12:	49 f4       	brne	.+18     	; 0xa26 <i2c_start+0x78>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     a24:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     a26:	08 95       	ret

00000a28 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a28:	84 e9       	ldi	r24, 0x94	; 148
     a2a:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	06 b6       	in	r0, 0x36	; 54
     a32:	04 fe       	sbrs	r0, 4
     a34:	05 c0       	rjmp	.+10     	; 0xa40 <i2c_stop+0x18>
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	81 15       	cp	r24, r1
     a3a:	21 e0       	ldi	r18, 0x01	; 1
     a3c:	92 07       	cpc	r25, r18
     a3e:	c1 f7       	brne	.-16     	; 0xa30 <i2c_stop+0x8>
     a40:	08 95       	ret

00000a42 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     a42:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     a44:	84 e8       	ldi	r24, 0x84	; 132
     a46:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     a50:	06 b6       	in	r0, 0x36	; 54
     a52:	07 fc       	sbrc	r0, 7
     a54:	05 c0       	rjmp	.+10     	; 0xa60 <i2c_write+0x1e>
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	a1 09       	sbc	r26, r1
     a5a:	b1 09       	sbc	r27, r1
     a5c:	c8 f7       	brcc	.-14     	; 0xa50 <i2c_write+0xe>
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <i2c_write+0x26>
	if(i2c_timer == 0)
     a60:	89 2b       	or	r24, r25
     a62:	8a 2b       	or	r24, r26
     a64:	8b 2b       	or	r24, r27
     a66:	39 f0       	breq	.+14     	; 0xa76 <i2c_write+0x34>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     a68:	91 b1       	in	r25, 0x01	; 1
     a6a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	98 32       	cpi	r25, 0x28	; 40
     a70:	19 f4       	brne	.+6      	; 0xa78 <i2c_write+0x36>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     a78:	08 95       	ret

00000a7a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     a7a:	84 ec       	ldi	r24, 0xC4	; 196
     a7c:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     a86:	06 b6       	in	r0, 0x36	; 54
     a88:	07 fc       	sbrc	r0, 7
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <i2c_readAck+0x1c>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	a1 09       	sbc	r26, r1
     a90:	b1 09       	sbc	r27, r1
     a92:	c8 f7       	brcc	.-14     	; 0xa86 <i2c_readAck+0xc>
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <i2c_readAck+0x24>
	if(i2c_timer == 0)
     a96:	89 2b       	or	r24, r25
     a98:	8a 2b       	or	r24, r26
     a9a:	8b 2b       	or	r24, r27
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <i2c_readAck+0x28>
		return 0;

    return TWDR;
     a9e:	83 b1       	in	r24, 0x03	; 3
     aa0:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     aa2:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     aa4:	08 95       	ret

00000aa6 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     aa6:	84 e8       	ldi	r24, 0x84	; 132
     aa8:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     ab2:	06 b6       	in	r0, 0x36	; 54
     ab4:	07 fc       	sbrc	r0, 7
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <i2c_readNak+0x1c>
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	a1 09       	sbc	r26, r1
     abc:	b1 09       	sbc	r27, r1
     abe:	c8 f7       	brcc	.-14     	; 0xab2 <i2c_readNak+0xc>
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <i2c_readNak+0x24>
	if(i2c_timer == 0)
     ac2:	89 2b       	or	r24, r25
     ac4:	8a 2b       	or	r24, r26
     ac6:	8b 2b       	or	r24, r27
     ac8:	11 f0       	breq	.+4      	; 0xace <i2c_readNak+0x28>
		return 0;
	
    return TWDR;
     aca:	83 b1       	in	r24, 0x03	; 3
     acc:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     ace:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     ad0:	08 95       	ret

00000ad2 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	2f 93       	push	r18
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     ae6:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
     ae8:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     aea:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     aec:	e0 91 66 00 	lds	r30, 0x0066
     af0:	ef 5f       	subi	r30, 0xFF	; 255
     af2:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     af4:	90 91 65 00 	lds	r25, 0x0065
     af8:	e9 17       	cp	r30, r25
     afa:	39 f0       	breq	.+14     	; 0xb0a <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     afc:	e0 93 66 00 	sts	0x0066, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	e7 59       	subi	r30, 0x97	; 151
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	20 83       	st	Z, r18
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     b0a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
     b0c:	80 93 64 00 	sts	0x0064, r24
}
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     b36:	90 91 68 00 	lds	r25, 0x0068
     b3a:	80 91 67 00 	lds	r24, 0x0067
     b3e:	98 17       	cp	r25, r24
     b40:	61 f0       	breq	.+24     	; 0xb5a <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     b42:	e0 91 67 00 	lds	r30, 0x0067
     b46:	ef 5f       	subi	r30, 0xFF	; 255
     b48:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     b4a:	e0 93 67 00 	sts	0x0067, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	e7 57       	subi	r30, 0x77	; 119
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	80 81       	ld	r24, Z
     b56:	8c b9       	out	0x0c, r24	; 12
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     b5a:	55 98       	cbi	0x0a, 5	; 10
    }
}
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     b6e:	10 92 68 00 	sts	0x0068, r1
    UART_TxTail = 0;
     b72:	10 92 67 00 	sts	0x0067, r1
    UART_RxHead = 0;
     b76:	10 92 66 00 	sts	0x0066, r1
    UART_RxTail = 0;
     b7a:	10 92 65 00 	sts	0x0065, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     b7e:	99 23       	and	r25, r25
     b80:	1c f4       	brge	.+6      	; 0xb88 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
     b82:	22 e0       	ldi	r18, 0x02	; 2
     b84:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
     b86:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
     b88:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
     b8a:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     b8c:	88 e9       	ldi	r24, 0x98	; 152
     b8e:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
     b90:	86 e8       	ldi	r24, 0x86	; 134
     b92:	80 bd       	out	0x20, r24	; 32
     b94:	08 95       	ret

00000b96 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     b96:	20 91 68 00 	lds	r18, 0x0068
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     b9e:	90 91 67 00 	lds	r25, 0x0067
     ba2:	29 17       	cp	r18, r25
     ba4:	e1 f3       	breq	.-8      	; 0xb9e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     ba6:	e2 2f       	mov	r30, r18
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	e7 57       	subi	r30, 0x77	; 119
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     bb0:	20 93 68 00 	sts	0x0068, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     bb4:	55 9a       	sbi	0x0a, 5	; 10
     bb6:	08 95       	ret

00000bb8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	ec 01       	movw	r28, r24
    while (*s) 
     bbe:	88 81       	ld	r24, Y
     bc0:	88 23       	and	r24, r24
     bc2:	31 f0       	breq	.+12     	; 0xbd0 <uart_puts+0x18>
     bc4:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     bc6:	0e 94 cb 05 	call	0xb96	; 0xb96 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     bca:	89 91       	ld	r24, Y+
     bcc:	81 11       	cpse	r24, r1
     bce:	fb cf       	rjmp	.-10     	; 0xbc6 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <__subsf3>:
     bd6:	50 58       	subi	r21, 0x80	; 128

00000bd8 <__addsf3>:
     bd8:	bb 27       	eor	r27, r27
     bda:	aa 27       	eor	r26, r26
     bdc:	0e d0       	rcall	.+28     	; 0xbfa <__addsf3x>
     bde:	a3 c1       	rjmp	.+838    	; 0xf26 <__fp_round>
     be0:	94 d1       	rcall	.+808    	; 0xf0a <__fp_pscA>
     be2:	30 f0       	brcs	.+12     	; 0xbf0 <__addsf3+0x18>
     be4:	99 d1       	rcall	.+818    	; 0xf18 <__fp_pscB>
     be6:	20 f0       	brcs	.+8      	; 0xbf0 <__addsf3+0x18>
     be8:	31 f4       	brne	.+12     	; 0xbf6 <__addsf3+0x1e>
     bea:	9f 3f       	cpi	r25, 0xFF	; 255
     bec:	11 f4       	brne	.+4      	; 0xbf2 <__addsf3+0x1a>
     bee:	1e f4       	brtc	.+6      	; 0xbf6 <__addsf3+0x1e>
     bf0:	64 c1       	rjmp	.+712    	; 0xeba <__fp_nan>
     bf2:	0e f4       	brtc	.+2      	; 0xbf6 <__addsf3+0x1e>
     bf4:	e0 95       	com	r30
     bf6:	e7 fb       	bst	r30, 7
     bf8:	5a c1       	rjmp	.+692    	; 0xeae <__fp_inf>

00000bfa <__addsf3x>:
     bfa:	e9 2f       	mov	r30, r25
     bfc:	a5 d1       	rcall	.+842    	; 0xf48 <__fp_split3>
     bfe:	80 f3       	brcs	.-32     	; 0xbe0 <__addsf3+0x8>
     c00:	ba 17       	cp	r27, r26
     c02:	62 07       	cpc	r22, r18
     c04:	73 07       	cpc	r23, r19
     c06:	84 07       	cpc	r24, r20
     c08:	95 07       	cpc	r25, r21
     c0a:	18 f0       	brcs	.+6      	; 0xc12 <__addsf3x+0x18>
     c0c:	71 f4       	brne	.+28     	; 0xc2a <__addsf3x+0x30>
     c0e:	9e f5       	brtc	.+102    	; 0xc76 <__addsf3x+0x7c>
     c10:	bd c1       	rjmp	.+890    	; 0xf8c <__fp_zero>
     c12:	0e f4       	brtc	.+2      	; 0xc16 <__addsf3x+0x1c>
     c14:	e0 95       	com	r30
     c16:	0b 2e       	mov	r0, r27
     c18:	ba 2f       	mov	r27, r26
     c1a:	a0 2d       	mov	r26, r0
     c1c:	0b 01       	movw	r0, r22
     c1e:	b9 01       	movw	r22, r18
     c20:	90 01       	movw	r18, r0
     c22:	0c 01       	movw	r0, r24
     c24:	ca 01       	movw	r24, r20
     c26:	a0 01       	movw	r20, r0
     c28:	11 24       	eor	r1, r1
     c2a:	ff 27       	eor	r31, r31
     c2c:	59 1b       	sub	r21, r25
     c2e:	99 f0       	breq	.+38     	; 0xc56 <__addsf3x+0x5c>
     c30:	59 3f       	cpi	r21, 0xF9	; 249
     c32:	50 f4       	brcc	.+20     	; 0xc48 <__addsf3x+0x4e>
     c34:	50 3e       	cpi	r21, 0xE0	; 224
     c36:	68 f1       	brcs	.+90     	; 0xc92 <__addsf3x+0x98>
     c38:	1a 16       	cp	r1, r26
     c3a:	f0 40       	sbci	r31, 0x00	; 0
     c3c:	a2 2f       	mov	r26, r18
     c3e:	23 2f       	mov	r18, r19
     c40:	34 2f       	mov	r19, r20
     c42:	44 27       	eor	r20, r20
     c44:	58 5f       	subi	r21, 0xF8	; 248
     c46:	f3 cf       	rjmp	.-26     	; 0xc2e <__addsf3x+0x34>
     c48:	46 95       	lsr	r20
     c4a:	37 95       	ror	r19
     c4c:	27 95       	ror	r18
     c4e:	a7 95       	ror	r26
     c50:	f0 40       	sbci	r31, 0x00	; 0
     c52:	53 95       	inc	r21
     c54:	c9 f7       	brne	.-14     	; 0xc48 <__addsf3x+0x4e>
     c56:	7e f4       	brtc	.+30     	; 0xc76 <__addsf3x+0x7c>
     c58:	1f 16       	cp	r1, r31
     c5a:	ba 0b       	sbc	r27, r26
     c5c:	62 0b       	sbc	r22, r18
     c5e:	73 0b       	sbc	r23, r19
     c60:	84 0b       	sbc	r24, r20
     c62:	ba f0       	brmi	.+46     	; 0xc92 <__addsf3x+0x98>
     c64:	91 50       	subi	r25, 0x01	; 1
     c66:	a1 f0       	breq	.+40     	; 0xc90 <__addsf3x+0x96>
     c68:	ff 0f       	add	r31, r31
     c6a:	bb 1f       	adc	r27, r27
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	c2 f7       	brpl	.-16     	; 0xc64 <__addsf3x+0x6a>
     c74:	0e c0       	rjmp	.+28     	; 0xc92 <__addsf3x+0x98>
     c76:	ba 0f       	add	r27, r26
     c78:	62 1f       	adc	r22, r18
     c7a:	73 1f       	adc	r23, r19
     c7c:	84 1f       	adc	r24, r20
     c7e:	48 f4       	brcc	.+18     	; 0xc92 <__addsf3x+0x98>
     c80:	87 95       	ror	r24
     c82:	77 95       	ror	r23
     c84:	67 95       	ror	r22
     c86:	b7 95       	ror	r27
     c88:	f7 95       	ror	r31
     c8a:	9e 3f       	cpi	r25, 0xFE	; 254
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <__addsf3x+0x96>
     c8e:	b3 cf       	rjmp	.-154    	; 0xbf6 <__addsf3+0x1e>
     c90:	93 95       	inc	r25
     c92:	88 0f       	add	r24, r24
     c94:	08 f0       	brcs	.+2      	; 0xc98 <__addsf3x+0x9e>
     c96:	99 27       	eor	r25, r25
     c98:	ee 0f       	add	r30, r30
     c9a:	97 95       	ror	r25
     c9c:	87 95       	ror	r24
     c9e:	08 95       	ret
     ca0:	34 d1       	rcall	.+616    	; 0xf0a <__fp_pscA>
     ca2:	58 f0       	brcs	.+22     	; 0xcba <__addsf3x+0xc0>
     ca4:	80 e8       	ldi	r24, 0x80	; 128
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	09 f4       	brne	.+2      	; 0xcac <__addsf3x+0xb2>
     caa:	9e ef       	ldi	r25, 0xFE	; 254
     cac:	35 d1       	rcall	.+618    	; 0xf18 <__fp_pscB>
     cae:	28 f0       	brcs	.+10     	; 0xcba <__addsf3x+0xc0>
     cb0:	40 e8       	ldi	r20, 0x80	; 128
     cb2:	51 e0       	ldi	r21, 0x01	; 1
     cb4:	59 f4       	brne	.+22     	; 0xccc <atan2+0xe>
     cb6:	5e ef       	ldi	r21, 0xFE	; 254
     cb8:	09 c0       	rjmp	.+18     	; 0xccc <atan2+0xe>
     cba:	ff c0       	rjmp	.+510    	; 0xeba <__fp_nan>
     cbc:	67 c1       	rjmp	.+718    	; 0xf8c <__fp_zero>

00000cbe <atan2>:
     cbe:	e9 2f       	mov	r30, r25
     cc0:	e0 78       	andi	r30, 0x80	; 128
     cc2:	42 d1       	rcall	.+644    	; 0xf48 <__fp_split3>
     cc4:	68 f3       	brcs	.-38     	; 0xca0 <__addsf3x+0xa6>
     cc6:	09 2e       	mov	r0, r25
     cc8:	05 2a       	or	r0, r21
     cca:	c1 f3       	breq	.-16     	; 0xcbc <__addsf3x+0xc2>
     ccc:	26 17       	cp	r18, r22
     cce:	37 07       	cpc	r19, r23
     cd0:	48 07       	cpc	r20, r24
     cd2:	59 07       	cpc	r21, r25
     cd4:	38 f0       	brcs	.+14     	; 0xce4 <atan2+0x26>
     cd6:	0e 2e       	mov	r0, r30
     cd8:	07 f8       	bld	r0, 7
     cda:	e0 25       	eor	r30, r0
     cdc:	69 f0       	breq	.+26     	; 0xcf8 <atan2+0x3a>
     cde:	e0 25       	eor	r30, r0
     ce0:	e0 64       	ori	r30, 0x40	; 64
     ce2:	0a c0       	rjmp	.+20     	; 0xcf8 <atan2+0x3a>
     ce4:	ef 63       	ori	r30, 0x3F	; 63
     ce6:	07 f8       	bld	r0, 7
     ce8:	00 94       	com	r0
     cea:	07 fa       	bst	r0, 7
     cec:	db 01       	movw	r26, r22
     cee:	b9 01       	movw	r22, r18
     cf0:	9d 01       	movw	r18, r26
     cf2:	dc 01       	movw	r26, r24
     cf4:	ca 01       	movw	r24, r20
     cf6:	ad 01       	movw	r20, r26
     cf8:	ef 93       	push	r30
     cfa:	43 d0       	rcall	.+134    	; 0xd82 <__divsf3_pse>
     cfc:	14 d1       	rcall	.+552    	; 0xf26 <__fp_round>
     cfe:	0a d0       	rcall	.+20     	; 0xd14 <atan>
     d00:	5f 91       	pop	r21
     d02:	55 23       	and	r21, r21
     d04:	31 f0       	breq	.+12     	; 0xd12 <atan2+0x54>
     d06:	2b ed       	ldi	r18, 0xDB	; 219
     d08:	3f e0       	ldi	r19, 0x0F	; 15
     d0a:	49 e4       	ldi	r20, 0x49	; 73
     d0c:	50 fd       	sbrc	r21, 0
     d0e:	49 ec       	ldi	r20, 0xC9	; 201
     d10:	63 cf       	rjmp	.-314    	; 0xbd8 <__addsf3>
     d12:	08 95       	ret

00000d14 <atan>:
     d14:	df 93       	push	r29
     d16:	dd 27       	eor	r29, r29
     d18:	b9 2f       	mov	r27, r25
     d1a:	bf 77       	andi	r27, 0x7F	; 127
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	16 16       	cp	r1, r22
     d22:	17 06       	cpc	r1, r23
     d24:	48 07       	cpc	r20, r24
     d26:	5b 07       	cpc	r21, r27
     d28:	10 f4       	brcc	.+4      	; 0xd2e <atan+0x1a>
     d2a:	d9 2f       	mov	r29, r25
     d2c:	36 d1       	rcall	.+620    	; 0xf9a <inverse>
     d2e:	9f 93       	push	r25
     d30:	8f 93       	push	r24
     d32:	7f 93       	push	r23
     d34:	6f 93       	push	r22
     d36:	9b d1       	rcall	.+822    	; 0x106e <square>
     d38:	e4 e5       	ldi	r30, 0x54	; 84
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	c1 d0       	rcall	.+386    	; 0xec0 <__fp_powser>
     d3e:	f3 d0       	rcall	.+486    	; 0xf26 <__fp_round>
     d40:	2f 91       	pop	r18
     d42:	3f 91       	pop	r19
     d44:	4f 91       	pop	r20
     d46:	5f 91       	pop	r21
     d48:	3b d1       	rcall	.+630    	; 0xfc0 <__mulsf3x>
     d4a:	dd 23       	and	r29, r29
     d4c:	49 f0       	breq	.+18     	; 0xd60 <atan+0x4c>
     d4e:	90 58       	subi	r25, 0x80	; 128
     d50:	a2 ea       	ldi	r26, 0xA2	; 162
     d52:	2a ed       	ldi	r18, 0xDA	; 218
     d54:	3f e0       	ldi	r19, 0x0F	; 15
     d56:	49 ec       	ldi	r20, 0xC9	; 201
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	d0 78       	andi	r29, 0x80	; 128
     d5c:	5d 27       	eor	r21, r29
     d5e:	4d df       	rcall	.-358    	; 0xbfa <__addsf3x>
     d60:	df 91       	pop	r29
     d62:	e1 c0       	rjmp	.+450    	; 0xf26 <__fp_round>

00000d64 <__divsf3>:
     d64:	0c d0       	rcall	.+24     	; 0xd7e <__divsf3x>
     d66:	df c0       	rjmp	.+446    	; 0xf26 <__fp_round>
     d68:	d7 d0       	rcall	.+430    	; 0xf18 <__fp_pscB>
     d6a:	40 f0       	brcs	.+16     	; 0xd7c <__divsf3+0x18>
     d6c:	ce d0       	rcall	.+412    	; 0xf0a <__fp_pscA>
     d6e:	30 f0       	brcs	.+12     	; 0xd7c <__divsf3+0x18>
     d70:	21 f4       	brne	.+8      	; 0xd7a <__divsf3+0x16>
     d72:	5f 3f       	cpi	r21, 0xFF	; 255
     d74:	19 f0       	breq	.+6      	; 0xd7c <__divsf3+0x18>
     d76:	9b c0       	rjmp	.+310    	; 0xeae <__fp_inf>
     d78:	51 11       	cpse	r21, r1
     d7a:	09 c1       	rjmp	.+530    	; 0xf8e <__fp_szero>
     d7c:	9e c0       	rjmp	.+316    	; 0xeba <__fp_nan>

00000d7e <__divsf3x>:
     d7e:	e4 d0       	rcall	.+456    	; 0xf48 <__fp_split3>
     d80:	98 f3       	brcs	.-26     	; 0xd68 <__divsf3+0x4>

00000d82 <__divsf3_pse>:
     d82:	99 23       	and	r25, r25
     d84:	c9 f3       	breq	.-14     	; 0xd78 <__divsf3+0x14>
     d86:	55 23       	and	r21, r21
     d88:	b1 f3       	breq	.-20     	; 0xd76 <__divsf3+0x12>
     d8a:	95 1b       	sub	r25, r21
     d8c:	55 0b       	sbc	r21, r21
     d8e:	bb 27       	eor	r27, r27
     d90:	aa 27       	eor	r26, r26
     d92:	62 17       	cp	r22, r18
     d94:	73 07       	cpc	r23, r19
     d96:	84 07       	cpc	r24, r20
     d98:	38 f0       	brcs	.+14     	; 0xda8 <__divsf3_pse+0x26>
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	aa 1f       	adc	r26, r26
     da6:	a9 f3       	breq	.-22     	; 0xd92 <__divsf3_pse+0x10>
     da8:	33 d0       	rcall	.+102    	; 0xe10 <__divsf3_pse+0x8e>
     daa:	0e 2e       	mov	r0, r30
     dac:	3a f0       	brmi	.+14     	; 0xdbc <__divsf3_pse+0x3a>
     dae:	e0 e8       	ldi	r30, 0x80	; 128
     db0:	30 d0       	rcall	.+96     	; 0xe12 <__divsf3_pse+0x90>
     db2:	91 50       	subi	r25, 0x01	; 1
     db4:	50 40       	sbci	r21, 0x00	; 0
     db6:	e6 95       	lsr	r30
     db8:	00 1c       	adc	r0, r0
     dba:	ca f7       	brpl	.-14     	; 0xdae <__divsf3_pse+0x2c>
     dbc:	29 d0       	rcall	.+82     	; 0xe10 <__divsf3_pse+0x8e>
     dbe:	fe 2f       	mov	r31, r30
     dc0:	27 d0       	rcall	.+78     	; 0xe10 <__divsf3_pse+0x8e>
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	bb 1f       	adc	r27, r27
     dca:	26 17       	cp	r18, r22
     dcc:	37 07       	cpc	r19, r23
     dce:	48 07       	cpc	r20, r24
     dd0:	ab 07       	cpc	r26, r27
     dd2:	b0 e8       	ldi	r27, 0x80	; 128
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <__divsf3_pse+0x56>
     dd6:	bb 0b       	sbc	r27, r27
     dd8:	80 2d       	mov	r24, r0
     dda:	bf 01       	movw	r22, r30
     ddc:	ff 27       	eor	r31, r31
     dde:	93 58       	subi	r25, 0x83	; 131
     de0:	5f 4f       	sbci	r21, 0xFF	; 255
     de2:	2a f0       	brmi	.+10     	; 0xdee <__divsf3_pse+0x6c>
     de4:	9e 3f       	cpi	r25, 0xFE	; 254
     de6:	51 05       	cpc	r21, r1
     de8:	68 f0       	brcs	.+26     	; 0xe04 <__divsf3_pse+0x82>
     dea:	61 c0       	rjmp	.+194    	; 0xeae <__fp_inf>
     dec:	d0 c0       	rjmp	.+416    	; 0xf8e <__fp_szero>
     dee:	5f 3f       	cpi	r21, 0xFF	; 255
     df0:	ec f3       	brlt	.-6      	; 0xdec <__divsf3_pse+0x6a>
     df2:	98 3e       	cpi	r25, 0xE8	; 232
     df4:	dc f3       	brlt	.-10     	; 0xdec <__divsf3_pse+0x6a>
     df6:	86 95       	lsr	r24
     df8:	77 95       	ror	r23
     dfa:	67 95       	ror	r22
     dfc:	b7 95       	ror	r27
     dfe:	f7 95       	ror	r31
     e00:	9f 5f       	subi	r25, 0xFF	; 255
     e02:	c9 f7       	brne	.-14     	; 0xdf6 <__divsf3_pse+0x74>
     e04:	88 0f       	add	r24, r24
     e06:	91 1d       	adc	r25, r1
     e08:	96 95       	lsr	r25
     e0a:	87 95       	ror	r24
     e0c:	97 f9       	bld	r25, 7
     e0e:	08 95       	ret
     e10:	e1 e0       	ldi	r30, 0x01	; 1
     e12:	66 0f       	add	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	88 1f       	adc	r24, r24
     e18:	bb 1f       	adc	r27, r27
     e1a:	62 17       	cp	r22, r18
     e1c:	73 07       	cpc	r23, r19
     e1e:	84 07       	cpc	r24, r20
     e20:	ba 07       	cpc	r27, r26
     e22:	20 f0       	brcs	.+8      	; 0xe2c <__divsf3_pse+0xaa>
     e24:	62 1b       	sub	r22, r18
     e26:	73 0b       	sbc	r23, r19
     e28:	84 0b       	sbc	r24, r20
     e2a:	ba 0b       	sbc	r27, r26
     e2c:	ee 1f       	adc	r30, r30
     e2e:	88 f7       	brcc	.-30     	; 0xe12 <__divsf3_pse+0x90>
     e30:	e0 95       	com	r30
     e32:	08 95       	ret

00000e34 <__floatunsisf>:
     e34:	e8 94       	clt
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <__floatsisf+0x12>

00000e38 <__floatsisf>:
     e38:	97 fb       	bst	r25, 7
     e3a:	3e f4       	brtc	.+14     	; 0xe4a <__floatsisf+0x12>
     e3c:	90 95       	com	r25
     e3e:	80 95       	com	r24
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	99 23       	and	r25, r25
     e4c:	a9 f0       	breq	.+42     	; 0xe78 <__floatsisf+0x40>
     e4e:	f9 2f       	mov	r31, r25
     e50:	96 e9       	ldi	r25, 0x96	; 150
     e52:	bb 27       	eor	r27, r27
     e54:	93 95       	inc	r25
     e56:	f6 95       	lsr	r31
     e58:	87 95       	ror	r24
     e5a:	77 95       	ror	r23
     e5c:	67 95       	ror	r22
     e5e:	b7 95       	ror	r27
     e60:	f1 11       	cpse	r31, r1
     e62:	f8 cf       	rjmp	.-16     	; 0xe54 <__floatsisf+0x1c>
     e64:	fa f4       	brpl	.+62     	; 0xea4 <__floatsisf+0x6c>
     e66:	bb 0f       	add	r27, r27
     e68:	11 f4       	brne	.+4      	; 0xe6e <__floatsisf+0x36>
     e6a:	60 ff       	sbrs	r22, 0
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <__floatsisf+0x6c>
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <__floatsisf+0x6c>
     e78:	88 23       	and	r24, r24
     e7a:	11 f0       	breq	.+4      	; 0xe80 <__floatsisf+0x48>
     e7c:	96 e9       	ldi	r25, 0x96	; 150
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <__floatsisf+0x6a>
     e80:	77 23       	and	r23, r23
     e82:	21 f0       	breq	.+8      	; 0xe8c <__floatsisf+0x54>
     e84:	9e e8       	ldi	r25, 0x8E	; 142
     e86:	87 2f       	mov	r24, r23
     e88:	76 2f       	mov	r23, r22
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <__floatsisf+0x5e>
     e8c:	66 23       	and	r22, r22
     e8e:	71 f0       	breq	.+28     	; 0xeac <__floatsisf+0x74>
     e90:	96 e8       	ldi	r25, 0x86	; 134
     e92:	86 2f       	mov	r24, r22
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	2a f0       	brmi	.+10     	; 0xea4 <__floatsisf+0x6c>
     e9a:	9a 95       	dec	r25
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	da f7       	brpl	.-10     	; 0xe9a <__floatsisf+0x62>
     ea4:	88 0f       	add	r24, r24
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret

00000eae <__fp_inf>:
     eae:	97 f9       	bld	r25, 7
     eb0:	9f 67       	ori	r25, 0x7F	; 127
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	08 95       	ret

00000eba <__fp_nan>:
     eba:	9f ef       	ldi	r25, 0xFF	; 255
     ebc:	80 ec       	ldi	r24, 0xC0	; 192
     ebe:	08 95       	ret

00000ec0 <__fp_powser>:
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	1f 93       	push	r17
     ec6:	0f 93       	push	r16
     ec8:	ff 92       	push	r15
     eca:	ef 92       	push	r14
     ecc:	df 92       	push	r13
     ece:	7b 01       	movw	r14, r22
     ed0:	8c 01       	movw	r16, r24
     ed2:	68 94       	set
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <__fp_powser+0x20>
     ed6:	da 2e       	mov	r13, r26
     ed8:	ef 01       	movw	r28, r30
     eda:	72 d0       	rcall	.+228    	; 0xfc0 <__mulsf3x>
     edc:	fe 01       	movw	r30, r28
     ede:	e8 94       	clt
     ee0:	a5 91       	lpm	r26, Z+
     ee2:	25 91       	lpm	r18, Z+
     ee4:	35 91       	lpm	r19, Z+
     ee6:	45 91       	lpm	r20, Z+
     ee8:	55 91       	lpm	r21, Z+
     eea:	ae f3       	brts	.-22     	; 0xed6 <__fp_powser+0x16>
     eec:	ef 01       	movw	r28, r30
     eee:	85 de       	rcall	.-758    	; 0xbfa <__addsf3x>
     ef0:	fe 01       	movw	r30, r28
     ef2:	97 01       	movw	r18, r14
     ef4:	a8 01       	movw	r20, r16
     ef6:	da 94       	dec	r13
     ef8:	79 f7       	brne	.-34     	; 0xed8 <__fp_powser+0x18>
     efa:	df 90       	pop	r13
     efc:	ef 90       	pop	r14
     efe:	ff 90       	pop	r15
     f00:	0f 91       	pop	r16
     f02:	1f 91       	pop	r17
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <__fp_pscA>:
     f0a:	00 24       	eor	r0, r0
     f0c:	0a 94       	dec	r0
     f0e:	16 16       	cp	r1, r22
     f10:	17 06       	cpc	r1, r23
     f12:	18 06       	cpc	r1, r24
     f14:	09 06       	cpc	r0, r25
     f16:	08 95       	ret

00000f18 <__fp_pscB>:
     f18:	00 24       	eor	r0, r0
     f1a:	0a 94       	dec	r0
     f1c:	12 16       	cp	r1, r18
     f1e:	13 06       	cpc	r1, r19
     f20:	14 06       	cpc	r1, r20
     f22:	05 06       	cpc	r0, r21
     f24:	08 95       	ret

00000f26 <__fp_round>:
     f26:	09 2e       	mov	r0, r25
     f28:	03 94       	inc	r0
     f2a:	00 0c       	add	r0, r0
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__fp_round+0xc>
     f2e:	88 23       	and	r24, r24
     f30:	52 f0       	brmi	.+20     	; 0xf46 <__fp_round+0x20>
     f32:	bb 0f       	add	r27, r27
     f34:	40 f4       	brcc	.+16     	; 0xf46 <__fp_round+0x20>
     f36:	bf 2b       	or	r27, r31
     f38:	11 f4       	brne	.+4      	; 0xf3e <__fp_round+0x18>
     f3a:	60 ff       	sbrs	r22, 0
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__fp_round+0x20>
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	08 95       	ret

00000f48 <__fp_split3>:
     f48:	57 fd       	sbrc	r21, 7
     f4a:	90 58       	subi	r25, 0x80	; 128
     f4c:	44 0f       	add	r20, r20
     f4e:	55 1f       	adc	r21, r21
     f50:	59 f0       	breq	.+22     	; 0xf68 <__fp_splitA+0x10>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	71 f0       	breq	.+28     	; 0xf72 <__fp_splitA+0x1a>
     f56:	47 95       	ror	r20

00000f58 <__fp_splitA>:
     f58:	88 0f       	add	r24, r24
     f5a:	97 fb       	bst	r25, 7
     f5c:	99 1f       	adc	r25, r25
     f5e:	61 f0       	breq	.+24     	; 0xf78 <__fp_splitA+0x20>
     f60:	9f 3f       	cpi	r25, 0xFF	; 255
     f62:	79 f0       	breq	.+30     	; 0xf82 <__fp_splitA+0x2a>
     f64:	87 95       	ror	r24
     f66:	08 95       	ret
     f68:	12 16       	cp	r1, r18
     f6a:	13 06       	cpc	r1, r19
     f6c:	14 06       	cpc	r1, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	f2 cf       	rjmp	.-28     	; 0xf56 <__fp_split3+0xe>
     f72:	46 95       	lsr	r20
     f74:	f1 df       	rcall	.-30     	; 0xf58 <__fp_splitA>
     f76:	08 c0       	rjmp	.+16     	; 0xf88 <__fp_splitA+0x30>
     f78:	16 16       	cp	r1, r22
     f7a:	17 06       	cpc	r1, r23
     f7c:	18 06       	cpc	r1, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	f1 cf       	rjmp	.-30     	; 0xf64 <__fp_splitA+0xc>
     f82:	86 95       	lsr	r24
     f84:	71 05       	cpc	r23, r1
     f86:	61 05       	cpc	r22, r1
     f88:	08 94       	sec
     f8a:	08 95       	ret

00000f8c <__fp_zero>:
     f8c:	e8 94       	clt

00000f8e <__fp_szero>:
     f8e:	bb 27       	eor	r27, r27
     f90:	66 27       	eor	r22, r22
     f92:	77 27       	eor	r23, r23
     f94:	cb 01       	movw	r24, r22
     f96:	97 f9       	bld	r25, 7
     f98:	08 95       	ret

00000f9a <inverse>:
     f9a:	9b 01       	movw	r18, r22
     f9c:	ac 01       	movw	r20, r24
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	80 e8       	ldi	r24, 0x80	; 128
     fa4:	9f e3       	ldi	r25, 0x3F	; 63
     fa6:	de ce       	rjmp	.-580    	; 0xd64 <__divsf3>

00000fa8 <__mulsf3>:
     fa8:	0b d0       	rcall	.+22     	; 0xfc0 <__mulsf3x>
     faa:	bd cf       	rjmp	.-134    	; 0xf26 <__fp_round>
     fac:	ae df       	rcall	.-164    	; 0xf0a <__fp_pscA>
     fae:	28 f0       	brcs	.+10     	; 0xfba <__mulsf3+0x12>
     fb0:	b3 df       	rcall	.-154    	; 0xf18 <__fp_pscB>
     fb2:	18 f0       	brcs	.+6      	; 0xfba <__mulsf3+0x12>
     fb4:	95 23       	and	r25, r21
     fb6:	09 f0       	breq	.+2      	; 0xfba <__mulsf3+0x12>
     fb8:	7a cf       	rjmp	.-268    	; 0xeae <__fp_inf>
     fba:	7f cf       	rjmp	.-258    	; 0xeba <__fp_nan>
     fbc:	11 24       	eor	r1, r1
     fbe:	e7 cf       	rjmp	.-50     	; 0xf8e <__fp_szero>

00000fc0 <__mulsf3x>:
     fc0:	c3 df       	rcall	.-122    	; 0xf48 <__fp_split3>
     fc2:	a0 f3       	brcs	.-24     	; 0xfac <__mulsf3+0x4>

00000fc4 <__mulsf3_pse>:
     fc4:	95 9f       	mul	r25, r21
     fc6:	d1 f3       	breq	.-12     	; 0xfbc <__mulsf3+0x14>
     fc8:	95 0f       	add	r25, r21
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	55 1f       	adc	r21, r21
     fce:	62 9f       	mul	r22, r18
     fd0:	f0 01       	movw	r30, r0
     fd2:	72 9f       	mul	r23, r18
     fd4:	bb 27       	eor	r27, r27
     fd6:	f0 0d       	add	r31, r0
     fd8:	b1 1d       	adc	r27, r1
     fda:	63 9f       	mul	r22, r19
     fdc:	aa 27       	eor	r26, r26
     fde:	f0 0d       	add	r31, r0
     fe0:	b1 1d       	adc	r27, r1
     fe2:	aa 1f       	adc	r26, r26
     fe4:	64 9f       	mul	r22, r20
     fe6:	66 27       	eor	r22, r22
     fe8:	b0 0d       	add	r27, r0
     fea:	a1 1d       	adc	r26, r1
     fec:	66 1f       	adc	r22, r22
     fee:	82 9f       	mul	r24, r18
     ff0:	22 27       	eor	r18, r18
     ff2:	b0 0d       	add	r27, r0
     ff4:	a1 1d       	adc	r26, r1
     ff6:	62 1f       	adc	r22, r18
     ff8:	73 9f       	mul	r23, r19
     ffa:	b0 0d       	add	r27, r0
     ffc:	a1 1d       	adc	r26, r1
     ffe:	62 1f       	adc	r22, r18
    1000:	83 9f       	mul	r24, r19
    1002:	a0 0d       	add	r26, r0
    1004:	61 1d       	adc	r22, r1
    1006:	22 1f       	adc	r18, r18
    1008:	74 9f       	mul	r23, r20
    100a:	33 27       	eor	r19, r19
    100c:	a0 0d       	add	r26, r0
    100e:	61 1d       	adc	r22, r1
    1010:	23 1f       	adc	r18, r19
    1012:	84 9f       	mul	r24, r20
    1014:	60 0d       	add	r22, r0
    1016:	21 1d       	adc	r18, r1
    1018:	82 2f       	mov	r24, r18
    101a:	76 2f       	mov	r23, r22
    101c:	6a 2f       	mov	r22, r26
    101e:	11 24       	eor	r1, r1
    1020:	9f 57       	subi	r25, 0x7F	; 127
    1022:	50 40       	sbci	r21, 0x00	; 0
    1024:	8a f0       	brmi	.+34     	; 0x1048 <__mulsf3_pse+0x84>
    1026:	e1 f0       	breq	.+56     	; 0x1060 <__mulsf3_pse+0x9c>
    1028:	88 23       	and	r24, r24
    102a:	4a f0       	brmi	.+18     	; 0x103e <__mulsf3_pse+0x7a>
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	bb 1f       	adc	r27, r27
    1032:	66 1f       	adc	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	91 50       	subi	r25, 0x01	; 1
    103a:	50 40       	sbci	r21, 0x00	; 0
    103c:	a9 f7       	brne	.-22     	; 0x1028 <__mulsf3_pse+0x64>
    103e:	9e 3f       	cpi	r25, 0xFE	; 254
    1040:	51 05       	cpc	r21, r1
    1042:	70 f0       	brcs	.+28     	; 0x1060 <__mulsf3_pse+0x9c>
    1044:	34 cf       	rjmp	.-408    	; 0xeae <__fp_inf>
    1046:	a3 cf       	rjmp	.-186    	; 0xf8e <__fp_szero>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	ec f3       	brlt	.-6      	; 0x1046 <__mulsf3_pse+0x82>
    104c:	98 3e       	cpi	r25, 0xE8	; 232
    104e:	dc f3       	brlt	.-10     	; 0x1046 <__mulsf3_pse+0x82>
    1050:	86 95       	lsr	r24
    1052:	77 95       	ror	r23
    1054:	67 95       	ror	r22
    1056:	b7 95       	ror	r27
    1058:	f7 95       	ror	r31
    105a:	e7 95       	ror	r30
    105c:	9f 5f       	subi	r25, 0xFF	; 255
    105e:	c1 f7       	brne	.-16     	; 0x1050 <__mulsf3_pse+0x8c>
    1060:	fe 2b       	or	r31, r30
    1062:	88 0f       	add	r24, r24
    1064:	91 1d       	adc	r25, r1
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	97 f9       	bld	r25, 7
    106c:	08 95       	ret

0000106e <square>:
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	9a cf       	rjmp	.-204    	; 0xfa8 <__mulsf3>

00001074 <dtostrf>:
    1074:	ef 92       	push	r14
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	e8 01       	movw	r28, r16
    1080:	47 ff       	sbrs	r20, 7
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <dtostrf+0x14>
    1084:	34 e1       	ldi	r19, 0x14	; 20
    1086:	01 c0       	rjmp	.+2      	; 0x108a <dtostrf+0x16>
    1088:	34 e0       	ldi	r19, 0x04	; 4
    108a:	e4 2f       	mov	r30, r20
    108c:	ff 27       	eor	r31, r31
    108e:	e7 fd       	sbrc	r30, 7
    1090:	f0 95       	com	r31
    1092:	f7 ff       	sbrs	r31, 7
    1094:	03 c0       	rjmp	.+6      	; 0x109c <dtostrf+0x28>
    1096:	f1 95       	neg	r31
    1098:	e1 95       	neg	r30
    109a:	f1 09       	sbc	r31, r1
    109c:	e3 2e       	mov	r14, r19
    109e:	02 2f       	mov	r16, r18
    10a0:	2e 2f       	mov	r18, r30
    10a2:	ae 01       	movw	r20, r28
    10a4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dtoa_prf>
    10a8:	ce 01       	movw	r24, r28
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	ef 90       	pop	r14
    10b4:	08 95       	ret

000010b6 <dtoa_prf>:
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	9f 92       	push	r9
    10bc:	af 92       	push	r10
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	29 97       	sbiw	r28, 0x09	; 9
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	6a 01       	movw	r12, r20
    10e2:	b2 2e       	mov	r11, r18
    10e4:	10 2f       	mov	r17, r16
    10e6:	0c 33       	cpi	r16, 0x3C	; 60
    10e8:	20 f4       	brcc	.+8      	; 0x10f2 <dtoa_prf+0x3c>
    10ea:	ff 24       	eor	r15, r15
    10ec:	f3 94       	inc	r15
    10ee:	f0 0e       	add	r15, r16
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <dtoa_prf+0x40>
    10f2:	4c e3       	ldi	r20, 0x3C	; 60
    10f4:	f4 2e       	mov	r15, r20
    10f6:	0f 2d       	mov	r16, r15
    10f8:	27 e0       	ldi	r18, 0x07	; 7
    10fa:	ae 01       	movw	r20, r28
    10fc:	4f 5f       	subi	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__ftoa_engine>
    1104:	79 81       	ldd	r23, Y+1	; 0x01
    1106:	27 2f       	mov	r18, r23
    1108:	29 70       	andi	r18, 0x09	; 9
    110a:	21 30       	cpi	r18, 0x01	; 1
    110c:	31 f0       	breq	.+12     	; 0x111a <dtoa_prf+0x64>
    110e:	e1 fc       	sbrc	r14, 1
    1110:	06 c0       	rjmp	.+12     	; 0x111e <dtoa_prf+0x68>
    1112:	e0 fc       	sbrc	r14, 0
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <dtoa_prf+0x6c>
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <dtoa_prf+0x6e>
    111a:	6d e2       	ldi	r22, 0x2D	; 45
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <dtoa_prf+0x6e>
    111e:	6b e2       	ldi	r22, 0x2B	; 43
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <dtoa_prf+0x6e>
    1122:	60 e2       	ldi	r22, 0x20	; 32
    1124:	ae 2d       	mov	r26, r14
    1126:	a0 71       	andi	r26, 0x10	; 16
    1128:	73 ff       	sbrs	r23, 3
    112a:	36 c0       	rjmp	.+108    	; 0x1198 <dtoa_prf+0xe2>
    112c:	66 23       	and	r22, r22
    112e:	11 f0       	breq	.+4      	; 0x1134 <dtoa_prf+0x7e>
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <dtoa_prf+0x80>
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	8b 15       	cp	r24, r11
    1138:	10 f4       	brcc	.+4      	; 0x113e <dtoa_prf+0x88>
    113a:	b8 1a       	sub	r11, r24
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <dtoa_prf+0x8a>
    113e:	b1 2c       	mov	r11, r1
    1140:	a1 11       	cpse	r26, r1
    1142:	0b c0       	rjmp	.+22     	; 0x115a <dtoa_prf+0xa4>
    1144:	f6 01       	movw	r30, r12
    1146:	8b 2d       	mov	r24, r11
    1148:	90 e2       	ldi	r25, 0x20	; 32
    114a:	88 23       	and	r24, r24
    114c:	19 f0       	breq	.+6      	; 0x1154 <dtoa_prf+0x9e>
    114e:	91 93       	st	Z+, r25
    1150:	81 50       	subi	r24, 0x01	; 1
    1152:	fb cf       	rjmp	.-10     	; 0x114a <dtoa_prf+0x94>
    1154:	cb 0c       	add	r12, r11
    1156:	d1 1c       	adc	r13, r1
    1158:	b1 2c       	mov	r11, r1
    115a:	66 23       	and	r22, r22
    115c:	31 f0       	breq	.+12     	; 0x116a <dtoa_prf+0xb4>
    115e:	f6 01       	movw	r30, r12
    1160:	60 83       	st	Z, r22
    1162:	96 01       	movw	r18, r12
    1164:	2f 5f       	subi	r18, 0xFF	; 255
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	69 01       	movw	r12, r18
    116a:	c6 01       	movw	r24, r12
    116c:	03 96       	adiw	r24, 0x03	; 3
    116e:	e2 fe       	sbrs	r14, 2
    1170:	05 c0       	rjmp	.+10     	; 0x117c <dtoa_prf+0xc6>
    1172:	2e e4       	ldi	r18, 0x4E	; 78
    1174:	f6 01       	movw	r30, r12
    1176:	20 83       	st	Z, r18
    1178:	31 e4       	ldi	r19, 0x41	; 65
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <dtoa_prf+0xce>
    117c:	2e e6       	ldi	r18, 0x6E	; 110
    117e:	f6 01       	movw	r30, r12
    1180:	20 83       	st	Z, r18
    1182:	31 e6       	ldi	r19, 0x61	; 97
    1184:	31 83       	std	Z+1, r19	; 0x01
    1186:	22 83       	std	Z+2, r18	; 0x02
    1188:	fc 01       	movw	r30, r24
    118a:	2b 2d       	mov	r18, r11
    118c:	30 e2       	ldi	r19, 0x20	; 32
    118e:	22 23       	and	r18, r18
    1190:	f1 f1       	breq	.+124    	; 0x120e <dtoa_prf+0x158>
    1192:	31 93       	st	Z+, r19
    1194:	21 50       	subi	r18, 0x01	; 1
    1196:	fb cf       	rjmp	.-10     	; 0x118e <dtoa_prf+0xd8>
    1198:	72 ff       	sbrs	r23, 2
    119a:	40 c0       	rjmp	.+128    	; 0x121c <dtoa_prf+0x166>
    119c:	66 23       	and	r22, r22
    119e:	11 f0       	breq	.+4      	; 0x11a4 <dtoa_prf+0xee>
    11a0:	84 e0       	ldi	r24, 0x04	; 4
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <dtoa_prf+0xf0>
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	8b 15       	cp	r24, r11
    11a8:	10 f4       	brcc	.+4      	; 0x11ae <dtoa_prf+0xf8>
    11aa:	b8 1a       	sub	r11, r24
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <dtoa_prf+0xfa>
    11ae:	b1 2c       	mov	r11, r1
    11b0:	a1 11       	cpse	r26, r1
    11b2:	0b c0       	rjmp	.+22     	; 0x11ca <dtoa_prf+0x114>
    11b4:	f6 01       	movw	r30, r12
    11b6:	8b 2d       	mov	r24, r11
    11b8:	90 e2       	ldi	r25, 0x20	; 32
    11ba:	88 23       	and	r24, r24
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <dtoa_prf+0x10e>
    11be:	91 93       	st	Z+, r25
    11c0:	81 50       	subi	r24, 0x01	; 1
    11c2:	fb cf       	rjmp	.-10     	; 0x11ba <dtoa_prf+0x104>
    11c4:	cb 0c       	add	r12, r11
    11c6:	d1 1c       	adc	r13, r1
    11c8:	b1 2c       	mov	r11, r1
    11ca:	66 23       	and	r22, r22
    11cc:	31 f0       	breq	.+12     	; 0x11da <dtoa_prf+0x124>
    11ce:	f6 01       	movw	r30, r12
    11d0:	60 83       	st	Z, r22
    11d2:	96 01       	movw	r18, r12
    11d4:	2f 5f       	subi	r18, 0xFF	; 255
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	69 01       	movw	r12, r18
    11da:	c6 01       	movw	r24, r12
    11dc:	03 96       	adiw	r24, 0x03	; 3
    11de:	e2 fe       	sbrs	r14, 2
    11e0:	07 c0       	rjmp	.+14     	; 0x11f0 <dtoa_prf+0x13a>
    11e2:	29 e4       	ldi	r18, 0x49	; 73
    11e4:	f6 01       	movw	r30, r12
    11e6:	20 83       	st	Z, r18
    11e8:	2e e4       	ldi	r18, 0x4E	; 78
    11ea:	21 83       	std	Z+1, r18	; 0x01
    11ec:	26 e4       	ldi	r18, 0x46	; 70
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <dtoa_prf+0x146>
    11f0:	29 e6       	ldi	r18, 0x69	; 105
    11f2:	f6 01       	movw	r30, r12
    11f4:	20 83       	st	Z, r18
    11f6:	2e e6       	ldi	r18, 0x6E	; 110
    11f8:	21 83       	std	Z+1, r18	; 0x01
    11fa:	26 e6       	ldi	r18, 0x66	; 102
    11fc:	22 83       	std	Z+2, r18	; 0x02
    11fe:	fc 01       	movw	r30, r24
    1200:	2b 2d       	mov	r18, r11
    1202:	30 e2       	ldi	r19, 0x20	; 32
    1204:	22 23       	and	r18, r18
    1206:	19 f0       	breq	.+6      	; 0x120e <dtoa_prf+0x158>
    1208:	31 93       	st	Z+, r19
    120a:	21 50       	subi	r18, 0x01	; 1
    120c:	fb cf       	rjmp	.-10     	; 0x1204 <dtoa_prf+0x14e>
    120e:	fc 01       	movw	r30, r24
    1210:	eb 0d       	add	r30, r11
    1212:	f1 1d       	adc	r31, r1
    1214:	10 82       	st	Z, r1
    1216:	8e ef       	ldi	r24, 0xFE	; 254
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	b7 c0       	rjmp	.+366    	; 0x138a <dtoa_prf+0x2d4>
    121c:	b1 e0       	ldi	r27, 0x01	; 1
    121e:	61 11       	cpse	r22, r1
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <dtoa_prf+0x16e>
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	4b 2f       	mov	r20, r27
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	18 16       	cp	r1, r24
    122a:	19 06       	cpc	r1, r25
    122c:	24 f4       	brge	.+8      	; 0x1236 <dtoa_prf+0x180>
    122e:	9c 01       	movw	r18, r24
    1230:	2f 5f       	subi	r18, 0xFF	; 255
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	02 c0       	rjmp	.+4      	; 0x123a <dtoa_prf+0x184>
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	24 0f       	add	r18, r20
    123c:	35 1f       	adc	r19, r21
    123e:	11 23       	and	r17, r17
    1240:	29 f0       	breq	.+10     	; 0x124c <dtoa_prf+0x196>
    1242:	41 2f       	mov	r20, r17
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	4f 5f       	subi	r20, 0xFF	; 255
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <dtoa_prf+0x19a>
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	42 0f       	add	r20, r18
    1252:	53 1f       	adc	r21, r19
    1254:	2b 2d       	mov	r18, r11
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	42 17       	cp	r20, r18
    125a:	53 07       	cpc	r21, r19
    125c:	14 f4       	brge	.+4      	; 0x1262 <dtoa_prf+0x1ac>
    125e:	b4 1a       	sub	r11, r20
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <dtoa_prf+0x1ae>
    1262:	b1 2c       	mov	r11, r1
    1264:	2e 2d       	mov	r18, r14
    1266:	28 71       	andi	r18, 0x18	; 24
    1268:	59 f4       	brne	.+22     	; 0x1280 <dtoa_prf+0x1ca>
    126a:	f6 01       	movw	r30, r12
    126c:	2b 2d       	mov	r18, r11
    126e:	30 e2       	ldi	r19, 0x20	; 32
    1270:	22 23       	and	r18, r18
    1272:	19 f0       	breq	.+6      	; 0x127a <dtoa_prf+0x1c4>
    1274:	31 93       	st	Z+, r19
    1276:	21 50       	subi	r18, 0x01	; 1
    1278:	fb cf       	rjmp	.-10     	; 0x1270 <dtoa_prf+0x1ba>
    127a:	cb 0c       	add	r12, r11
    127c:	d1 1c       	adc	r13, r1
    127e:	b1 2c       	mov	r11, r1
    1280:	bb 23       	and	r27, r27
    1282:	31 f0       	breq	.+12     	; 0x1290 <dtoa_prf+0x1da>
    1284:	f6 01       	movw	r30, r12
    1286:	60 83       	st	Z, r22
    1288:	96 01       	movw	r18, r12
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	69 01       	movw	r12, r18
    1290:	a1 11       	cpse	r26, r1
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <dtoa_prf+0x1f4>
    1294:	f6 01       	movw	r30, r12
    1296:	2b 2d       	mov	r18, r11
    1298:	30 e3       	ldi	r19, 0x30	; 48
    129a:	22 23       	and	r18, r18
    129c:	19 f0       	breq	.+6      	; 0x12a4 <dtoa_prf+0x1ee>
    129e:	31 93       	st	Z+, r19
    12a0:	21 50       	subi	r18, 0x01	; 1
    12a2:	fb cf       	rjmp	.-10     	; 0x129a <dtoa_prf+0x1e4>
    12a4:	cb 0c       	add	r12, r11
    12a6:	d1 1c       	adc	r13, r1
    12a8:	b1 2c       	mov	r11, r1
    12aa:	f8 0e       	add	r15, r24
    12ac:	0a 81       	ldd	r16, Y+2	; 0x02
    12ae:	37 2f       	mov	r19, r23
    12b0:	30 71       	andi	r19, 0x10	; 16
    12b2:	a3 2e       	mov	r10, r19
    12b4:	74 ff       	sbrs	r23, 4
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <dtoa_prf+0x208>
    12b8:	01 33       	cpi	r16, 0x31	; 49
    12ba:	09 f4       	brne	.+2      	; 0x12be <dtoa_prf+0x208>
    12bc:	fa 94       	dec	r15
    12be:	1f 14       	cp	r1, r15
    12c0:	2c f4       	brge	.+10     	; 0x12cc <dtoa_prf+0x216>
    12c2:	2f 2d       	mov	r18, r15
    12c4:	29 30       	cpi	r18, 0x09	; 9
    12c6:	18 f0       	brcs	.+6      	; 0x12ce <dtoa_prf+0x218>
    12c8:	28 e0       	ldi	r18, 0x08	; 8
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <dtoa_prf+0x218>
    12cc:	21 e0       	ldi	r18, 0x01	; 1
    12ce:	68 2f       	mov	r22, r24
    12d0:	39 2f       	mov	r19, r25
    12d2:	97 ff       	sbrs	r25, 7
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <dtoa_prf+0x224>
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	46 2f       	mov	r20, r22
    12dc:	53 2f       	mov	r21, r19
    12de:	61 2c       	mov	r6, r1
    12e0:	71 2c       	mov	r7, r1
    12e2:	3e e2       	ldi	r19, 0x2E	; 46
    12e4:	93 2e       	mov	r9, r19
    12e6:	bc 01       	movw	r22, r24
    12e8:	62 1b       	sub	r22, r18
    12ea:	71 09       	sbc	r23, r1
    12ec:	9b 01       	movw	r18, r22
    12ee:	dc 01       	movw	r26, r24
    12f0:	a4 1b       	sub	r26, r20
    12f2:	b5 0b       	sbc	r27, r21
    12f4:	e1 e0       	ldi	r30, 0x01	; 1
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	ec 0f       	add	r30, r28
    12fa:	fd 1f       	adc	r31, r29
    12fc:	ae 0f       	add	r26, r30
    12fe:	bf 1f       	adc	r27, r31
    1300:	e1 2e       	mov	r14, r17
    1302:	f1 2c       	mov	r15, r1
    1304:	f1 94       	neg	r15
    1306:	e1 94       	neg	r14
    1308:	f1 08       	sbc	r15, r1
    130a:	4f 3f       	cpi	r20, 0xFF	; 255
    130c:	ff ef       	ldi	r31, 0xFF	; 255
    130e:	5f 07       	cpc	r21, r31
    1310:	31 f4       	brne	.+12     	; 0x131e <dtoa_prf+0x268>
    1312:	f6 01       	movw	r30, r12
    1314:	90 82       	st	Z, r9
    1316:	b6 01       	movw	r22, r12
    1318:	6f 5f       	subi	r22, 0xFF	; 255
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	6b 01       	movw	r12, r22
    131e:	84 17       	cp	r24, r20
    1320:	95 07       	cpc	r25, r21
    1322:	4c f0       	brlt	.+18     	; 0x1336 <dtoa_prf+0x280>
    1324:	24 17       	cp	r18, r20
    1326:	35 07       	cpc	r19, r21
    1328:	34 f4       	brge	.+12     	; 0x1336 <dtoa_prf+0x280>
    132a:	bd 01       	movw	r22, r26
    132c:	66 0d       	add	r22, r6
    132e:	77 1d       	adc	r23, r7
    1330:	fb 01       	movw	r30, r22
    1332:	11 81       	ldd	r17, Z+1	; 0x01
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <dtoa_prf+0x282>
    1336:	10 e3       	ldi	r17, 0x30	; 48
    1338:	41 50       	subi	r20, 0x01	; 1
    133a:	51 09       	sbc	r21, r1
    133c:	ff ef       	ldi	r31, 0xFF	; 255
    133e:	6f 1a       	sub	r6, r31
    1340:	7f 0a       	sbc	r7, r31
    1342:	b6 01       	movw	r22, r12
    1344:	6f 5f       	subi	r22, 0xFF	; 255
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	4e 15       	cp	r20, r14
    134a:	5f 05       	cpc	r21, r15
    134c:	24 f0       	brlt	.+8      	; 0x1356 <dtoa_prf+0x2a0>
    134e:	f6 01       	movw	r30, r12
    1350:	10 83       	st	Z, r17
    1352:	6b 01       	movw	r12, r22
    1354:	da cf       	rjmp	.-76     	; 0x130a <dtoa_prf+0x254>
    1356:	48 17       	cp	r20, r24
    1358:	59 07       	cpc	r21, r25
    135a:	39 f4       	brne	.+14     	; 0x136a <dtoa_prf+0x2b4>
    135c:	06 33       	cpi	r16, 0x36	; 54
    135e:	20 f4       	brcc	.+8      	; 0x1368 <dtoa_prf+0x2b2>
    1360:	05 33       	cpi	r16, 0x35	; 53
    1362:	19 f4       	brne	.+6      	; 0x136a <dtoa_prf+0x2b4>
    1364:	a1 10       	cpse	r10, r1
    1366:	01 c0       	rjmp	.+2      	; 0x136a <dtoa_prf+0x2b4>
    1368:	11 e3       	ldi	r17, 0x31	; 49
    136a:	f6 01       	movw	r30, r12
    136c:	10 83       	st	Z, r17
    136e:	fb 01       	movw	r30, r22
    1370:	8b 2d       	mov	r24, r11
    1372:	90 e2       	ldi	r25, 0x20	; 32
    1374:	88 23       	and	r24, r24
    1376:	19 f0       	breq	.+6      	; 0x137e <dtoa_prf+0x2c8>
    1378:	91 93       	st	Z+, r25
    137a:	81 50       	subi	r24, 0x01	; 1
    137c:	fb cf       	rjmp	.-10     	; 0x1374 <dtoa_prf+0x2be>
    137e:	fb 01       	movw	r30, r22
    1380:	eb 0d       	add	r30, r11
    1382:	f1 1d       	adc	r31, r1
    1384:	10 82       	st	Z, r1
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	29 96       	adiw	r28, 0x09	; 9
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	7f 90       	pop	r7
    13ae:	6f 90       	pop	r6
    13b0:	08 95       	ret

000013b2 <__ftoa_engine>:
    13b2:	28 30       	cpi	r18, 0x08	; 8
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__ftoa_engine+0x6>
    13b6:	27 e0       	ldi	r18, 0x07	; 7
    13b8:	33 27       	eor	r19, r19
    13ba:	da 01       	movw	r26, r20
    13bc:	99 0f       	add	r25, r25
    13be:	31 1d       	adc	r19, r1
    13c0:	87 fd       	sbrc	r24, 7
    13c2:	91 60       	ori	r25, 0x01	; 1
    13c4:	00 96       	adiw	r24, 0x00	; 0
    13c6:	61 05       	cpc	r22, r1
    13c8:	71 05       	cpc	r23, r1
    13ca:	39 f4       	brne	.+14     	; 0x13da <__ftoa_engine+0x28>
    13cc:	32 60       	ori	r19, 0x02	; 2
    13ce:	2e 5f       	subi	r18, 0xFE	; 254
    13d0:	3d 93       	st	X+, r19
    13d2:	30 e3       	ldi	r19, 0x30	; 48
    13d4:	2a 95       	dec	r18
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <__ftoa_engine+0x1e>
    13d8:	08 95       	ret
    13da:	9f 3f       	cpi	r25, 0xFF	; 255
    13dc:	30 f0       	brcs	.+12     	; 0x13ea <__ftoa_engine+0x38>
    13de:	80 38       	cpi	r24, 0x80	; 128
    13e0:	71 05       	cpc	r23, r1
    13e2:	61 05       	cpc	r22, r1
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <__ftoa_engine+0x36>
    13e6:	3c 5f       	subi	r19, 0xFC	; 252
    13e8:	3c 5f       	subi	r19, 0xFC	; 252
    13ea:	3d 93       	st	X+, r19
    13ec:	91 30       	cpi	r25, 0x01	; 1
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <__ftoa_engine+0x40>
    13f0:	80 68       	ori	r24, 0x80	; 128
    13f2:	91 1d       	adc	r25, r1
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	1f 93       	push	r17
    13fa:	0f 93       	push	r16
    13fc:	ff 92       	push	r15
    13fe:	ef 92       	push	r14
    1400:	19 2f       	mov	r17, r25
    1402:	98 7f       	andi	r25, 0xF8	; 248
    1404:	96 95       	lsr	r25
    1406:	e9 2f       	mov	r30, r25
    1408:	96 95       	lsr	r25
    140a:	96 95       	lsr	r25
    140c:	e9 0f       	add	r30, r25
    140e:	ff 27       	eor	r31, r31
    1410:	e4 52       	subi	r30, 0x24	; 36
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	99 27       	eor	r25, r25
    1416:	33 27       	eor	r19, r19
    1418:	ee 24       	eor	r14, r14
    141a:	ff 24       	eor	r15, r15
    141c:	a7 01       	movw	r20, r14
    141e:	e7 01       	movw	r28, r14
    1420:	05 90       	lpm	r0, Z+
    1422:	08 94       	sec
    1424:	07 94       	ror	r0
    1426:	28 f4       	brcc	.+10     	; 0x1432 <__ftoa_engine+0x80>
    1428:	36 0f       	add	r19, r22
    142a:	e7 1e       	adc	r14, r23
    142c:	f8 1e       	adc	r15, r24
    142e:	49 1f       	adc	r20, r25
    1430:	51 1d       	adc	r21, r1
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	06 94       	lsr	r0
    143c:	a1 f7       	brne	.-24     	; 0x1426 <__ftoa_engine+0x74>
    143e:	05 90       	lpm	r0, Z+
    1440:	07 94       	ror	r0
    1442:	28 f4       	brcc	.+10     	; 0x144e <__ftoa_engine+0x9c>
    1444:	e7 0e       	add	r14, r23
    1446:	f8 1e       	adc	r15, r24
    1448:	49 1f       	adc	r20, r25
    144a:	56 1f       	adc	r21, r22
    144c:	c1 1d       	adc	r28, r1
    144e:	77 0f       	add	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	66 1f       	adc	r22, r22
    1456:	06 94       	lsr	r0
    1458:	a1 f7       	brne	.-24     	; 0x1442 <__ftoa_engine+0x90>
    145a:	05 90       	lpm	r0, Z+
    145c:	07 94       	ror	r0
    145e:	28 f4       	brcc	.+10     	; 0x146a <__ftoa_engine+0xb8>
    1460:	f8 0e       	add	r15, r24
    1462:	49 1f       	adc	r20, r25
    1464:	56 1f       	adc	r21, r22
    1466:	c7 1f       	adc	r28, r23
    1468:	d1 1d       	adc	r29, r1
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	66 1f       	adc	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	06 94       	lsr	r0
    1474:	a1 f7       	brne	.-24     	; 0x145e <__ftoa_engine+0xac>
    1476:	05 90       	lpm	r0, Z+
    1478:	07 94       	ror	r0
    147a:	20 f4       	brcc	.+8      	; 0x1484 <__ftoa_engine+0xd2>
    147c:	49 0f       	add	r20, r25
    147e:	56 1f       	adc	r21, r22
    1480:	c7 1f       	adc	r28, r23
    1482:	d8 1f       	adc	r29, r24
    1484:	99 0f       	add	r25, r25
    1486:	66 1f       	adc	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	06 94       	lsr	r0
    148e:	a9 f7       	brne	.-22     	; 0x147a <__ftoa_engine+0xc8>
    1490:	84 91       	lpm	r24, Z
    1492:	10 95       	com	r17
    1494:	17 70       	andi	r17, 0x07	; 7
    1496:	41 f0       	breq	.+16     	; 0x14a8 <__ftoa_engine+0xf6>
    1498:	d6 95       	lsr	r29
    149a:	c7 95       	ror	r28
    149c:	57 95       	ror	r21
    149e:	47 95       	ror	r20
    14a0:	f7 94       	ror	r15
    14a2:	e7 94       	ror	r14
    14a4:	1a 95       	dec	r17
    14a6:	c1 f7       	brne	.-16     	; 0x1498 <__ftoa_engine+0xe6>
    14a8:	e2 e8       	ldi	r30, 0x82	; 130
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	68 94       	set
    14ae:	15 90       	lpm	r1, Z+
    14b0:	15 91       	lpm	r17, Z+
    14b2:	35 91       	lpm	r19, Z+
    14b4:	65 91       	lpm	r22, Z+
    14b6:	95 91       	lpm	r25, Z+
    14b8:	05 90       	lpm	r0, Z+
    14ba:	7f e2       	ldi	r23, 0x2F	; 47
    14bc:	73 95       	inc	r23
    14be:	e1 18       	sub	r14, r1
    14c0:	f1 0a       	sbc	r15, r17
    14c2:	43 0b       	sbc	r20, r19
    14c4:	56 0b       	sbc	r21, r22
    14c6:	c9 0b       	sbc	r28, r25
    14c8:	d0 09       	sbc	r29, r0
    14ca:	c0 f7       	brcc	.-16     	; 0x14bc <__ftoa_engine+0x10a>
    14cc:	e1 0c       	add	r14, r1
    14ce:	f1 1e       	adc	r15, r17
    14d0:	43 1f       	adc	r20, r19
    14d2:	56 1f       	adc	r21, r22
    14d4:	c9 1f       	adc	r28, r25
    14d6:	d0 1d       	adc	r29, r0
    14d8:	7e f4       	brtc	.+30     	; 0x14f8 <__ftoa_engine+0x146>
    14da:	70 33       	cpi	r23, 0x30	; 48
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <__ftoa_engine+0x130>
    14de:	8a 95       	dec	r24
    14e0:	e6 cf       	rjmp	.-52     	; 0x14ae <__ftoa_engine+0xfc>
    14e2:	e8 94       	clt
    14e4:	01 50       	subi	r16, 0x01	; 1
    14e6:	30 f0       	brcs	.+12     	; 0x14f4 <__ftoa_engine+0x142>
    14e8:	08 0f       	add	r16, r24
    14ea:	0a f4       	brpl	.+2      	; 0x14ee <__ftoa_engine+0x13c>
    14ec:	00 27       	eor	r16, r16
    14ee:	02 17       	cp	r16, r18
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <__ftoa_engine+0x142>
    14f2:	20 2f       	mov	r18, r16
    14f4:	23 95       	inc	r18
    14f6:	02 2f       	mov	r16, r18
    14f8:	7a 33       	cpi	r23, 0x3A	; 58
    14fa:	28 f0       	brcs	.+10     	; 0x1506 <__ftoa_engine+0x154>
    14fc:	79 e3       	ldi	r23, 0x39	; 57
    14fe:	7d 93       	st	X+, r23
    1500:	2a 95       	dec	r18
    1502:	e9 f7       	brne	.-6      	; 0x14fe <__ftoa_engine+0x14c>
    1504:	10 c0       	rjmp	.+32     	; 0x1526 <__ftoa_engine+0x174>
    1506:	7d 93       	st	X+, r23
    1508:	2a 95       	dec	r18
    150a:	89 f6       	brne	.-94     	; 0x14ae <__ftoa_engine+0xfc>
    150c:	06 94       	lsr	r0
    150e:	97 95       	ror	r25
    1510:	67 95       	ror	r22
    1512:	37 95       	ror	r19
    1514:	17 95       	ror	r17
    1516:	17 94       	ror	r1
    1518:	e1 18       	sub	r14, r1
    151a:	f1 0a       	sbc	r15, r17
    151c:	43 0b       	sbc	r20, r19
    151e:	56 0b       	sbc	r21, r22
    1520:	c9 0b       	sbc	r28, r25
    1522:	d0 09       	sbc	r29, r0
    1524:	98 f0       	brcs	.+38     	; 0x154c <__ftoa_engine+0x19a>
    1526:	23 95       	inc	r18
    1528:	7e 91       	ld	r23, -X
    152a:	73 95       	inc	r23
    152c:	7a 33       	cpi	r23, 0x3A	; 58
    152e:	08 f0       	brcs	.+2      	; 0x1532 <__ftoa_engine+0x180>
    1530:	70 e3       	ldi	r23, 0x30	; 48
    1532:	7c 93       	st	X, r23
    1534:	20 13       	cpse	r18, r16
    1536:	b8 f7       	brcc	.-18     	; 0x1526 <__ftoa_engine+0x174>
    1538:	7e 91       	ld	r23, -X
    153a:	70 61       	ori	r23, 0x10	; 16
    153c:	7d 93       	st	X+, r23
    153e:	30 f0       	brcs	.+12     	; 0x154c <__ftoa_engine+0x19a>
    1540:	83 95       	inc	r24
    1542:	71 e3       	ldi	r23, 0x31	; 49
    1544:	7d 93       	st	X+, r23
    1546:	70 e3       	ldi	r23, 0x30	; 48
    1548:	2a 95       	dec	r18
    154a:	e1 f7       	brne	.-8      	; 0x1544 <__ftoa_engine+0x192>
    154c:	11 24       	eor	r1, r1
    154e:	ef 90       	pop	r14
    1550:	ff 90       	pop	r15
    1552:	0f 91       	pop	r16
    1554:	1f 91       	pop	r17
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	99 27       	eor	r25, r25
    155c:	87 fd       	sbrc	r24, 7
    155e:	90 95       	com	r25
    1560:	08 95       	ret

00001562 <_exit>:
    1562:	f8 94       	cli

00001564 <__stop_program>:
    1564:	ff cf       	rjmp	.-2      	; 0x1564 <__stop_program>
